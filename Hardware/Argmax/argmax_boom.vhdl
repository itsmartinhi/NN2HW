-- Generated by vxx2ghdl
--
-- Generated by VASY
--
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY argmax_boom IS
PORT(
  clk	: IN STD_LOGIC;
  c_argmax	: IN STD_LOGIC;
  reset	: IN STD_LOGIC;
  in_argmax_val	: IN STD_LOGIC_VECTOR(20 DOWNTO 0);
  in_argmax_index	: IN STD_LOGIC_VECTOR(3 DOWNTO 0);
  out_argmax_index	: OUT STD_LOGIC_VECTOR(3 DOWNTO 0)
);
END argmax_boom;

ARCHITECTURE RTL OF argmax_boom IS
  SIGNAL rtlalc_3	: STD_LOGIC_VECTOR(3 DOWNTO 0);
  SIGNAL reg_argmax_val	: STD_LOGIC_VECTOR(20 DOWNTO 0);
  SIGNAL rtlcarry_2	: STD_LOGIC_VECTOR(20 DOWNTO 1);
  SIGNAL aux0	: STD_LOGIC;
  SIGNAL aux1	: STD_LOGIC;
  SIGNAL aux2	: STD_LOGIC;
  SIGNAL aux3	: STD_LOGIC;
  SIGNAL aux4	: STD_LOGIC;
  SIGNAL aux7	: STD_LOGIC;
  SIGNAL aux11	: STD_LOGIC;
BEGIN
  out_argmax_index(3) <= rtlalc_3(3);
  out_argmax_index(2) <= rtlalc_3(2);
  out_argmax_index(1) <= rtlalc_3(1);
  out_argmax_index(0) <= rtlalc_3(0);
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_index(3)) AND NOT(reset))) = '1')
    THEN rtlalc_3(3) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_index(3)) OR reset) = '1')
    THEN rtlalc_3(3) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_index(2)) AND NOT(reset))) = '1')
    THEN rtlalc_3(2) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_index(2)) OR reset) = '1')
    THEN rtlalc_3(2) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_index(1)) AND NOT(reset))) = '1')
    THEN rtlalc_3(1) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_index(1)) OR reset) = '1')
    THEN rtlalc_3(1) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (((aux11 OR in_argmax_index(0)) AND (NOT(aux4) AND NOT(reset))) = '1')
    THEN rtlalc_3(0) <= '1';
    ELSIF ((NOT(aux11 OR in_argmax_index(0)) OR reset) = '1')
    THEN rtlalc_3(0) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((in_argmax_val(20) AND (c_argmax AND NOT(reset))) = '1')
    THEN reg_argmax_val(20) <= '1';
    ELSIF (reset = '1')
    THEN reg_argmax_val(20) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_val(19)) AND NOT(reset))) = '1')
    THEN reg_argmax_val(19) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_val(19)) OR reset) = '1')
    THEN reg_argmax_val(19) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_val(18)) AND NOT(reset))) = '1')
    THEN reg_argmax_val(18) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_val(18)) OR reset) = '1')
    THEN reg_argmax_val(18) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_val(17)) AND NOT(reset))) = '1')
    THEN reg_argmax_val(17) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_val(17)) OR reset) = '1')
    THEN reg_argmax_val(17) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_val(16)) AND NOT(reset))) = '1')
    THEN reg_argmax_val(16) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_val(16)) OR reset) = '1')
    THEN reg_argmax_val(16) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_val(15)) AND NOT(reset))) = '1')
    THEN reg_argmax_val(15) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_val(15)) OR reset) = '1')
    THEN reg_argmax_val(15) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_val(14)) AND NOT(reset))) = '1')
    THEN reg_argmax_val(14) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_val(14)) OR reset) = '1')
    THEN reg_argmax_val(14) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_val(13)) AND NOT(reset))) = '1')
    THEN reg_argmax_val(13) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_val(13)) OR reset) = '1')
    THEN reg_argmax_val(13) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_val(12)) AND NOT(reset))) = '1')
    THEN reg_argmax_val(12) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_val(12)) OR reset) = '1')
    THEN reg_argmax_val(12) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_val(11)) AND NOT(reset))) = '1')
    THEN reg_argmax_val(11) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_val(11)) OR reset) = '1')
    THEN reg_argmax_val(11) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_val(10)) AND NOT(reset))) = '1')
    THEN reg_argmax_val(10) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_val(10)) OR reset) = '1')
    THEN reg_argmax_val(10) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_val(9)) AND NOT(reset))) = '1')
    THEN reg_argmax_val(9) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_val(9)) OR reset) = '1')
    THEN reg_argmax_val(9) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_val(8)) AND NOT(reset))) = '1')
    THEN reg_argmax_val(8) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_val(8)) OR reset) = '1')
    THEN reg_argmax_val(8) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_val(7)) AND NOT(reset))) = '1')
    THEN reg_argmax_val(7) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_val(7)) OR reset) = '1')
    THEN reg_argmax_val(7) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_val(6)) AND NOT(reset))) = '1')
    THEN reg_argmax_val(6) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_val(6)) OR reset) = '1')
    THEN reg_argmax_val(6) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_val(5)) AND NOT(reset))) = '1')
    THEN reg_argmax_val(5) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_val(5)) OR reset) = '1')
    THEN reg_argmax_val(5) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_val(4)) AND NOT(reset))) = '1')
    THEN reg_argmax_val(4) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_val(4)) OR reset) = '1')
    THEN reg_argmax_val(4) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_val(3)) AND NOT(reset))) = '1')
    THEN reg_argmax_val(3) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_val(3)) OR reset) = '1')
    THEN reg_argmax_val(3) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (((aux11 OR in_argmax_val(2)) AND (NOT(aux4) AND NOT(reset))) = '1')
    THEN reg_argmax_val(2) <= '1';
    ELSIF ((NOT(aux11 OR in_argmax_val(2)) OR reset) = '1')
    THEN reg_argmax_val(2) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_val(1)) AND NOT(reset))) = '1')
    THEN reg_argmax_val(1) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_val(1)) OR reset) = '1')
    THEN reg_argmax_val(1) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux7 AND ((aux4 OR in_argmax_val(0)) AND NOT(reset))) = '1')
    THEN reg_argmax_val(0) <= '1';
    ELSIF ((NOT(aux4 OR in_argmax_val(0)) OR reset) = '1')
    THEN reg_argmax_val(0) <= '0';
    END IF;
    END IF;
  END PROCESS;
  rtlcarry_2(20) <= (((reg_argmax_val(19) AND NOT(in_argmax_val(19))) OR (reg_argmax_val(19) AND rtlcarry_2(19)
)) OR (NOT(in_argmax_val(19)) AND rtlcarry_2(19)));
  rtlcarry_2(19) <= (((reg_argmax_val(18) AND NOT(in_argmax_val(18))) OR (reg_argmax_val(18) AND rtlcarry_2(18)
)) OR (NOT(in_argmax_val(18)) AND rtlcarry_2(18)));
  rtlcarry_2(18) <= (((reg_argmax_val(17) AND NOT(in_argmax_val(17))) OR (reg_argmax_val(17) AND rtlcarry_2(17)
)) OR (NOT(in_argmax_val(17)) AND rtlcarry_2(17)));
  rtlcarry_2(17) <= (((reg_argmax_val(16) AND NOT(in_argmax_val(16))) OR (reg_argmax_val(16) AND rtlcarry_2(16)
)) OR (NOT(in_argmax_val(16)) AND rtlcarry_2(16)));
  rtlcarry_2(16) <= (((reg_argmax_val(15) AND NOT(in_argmax_val(15))) OR (reg_argmax_val(15) AND rtlcarry_2(15)
)) OR (NOT(in_argmax_val(15)) AND rtlcarry_2(15)));
  rtlcarry_2(15) <= (((reg_argmax_val(14) AND NOT(in_argmax_val(14))) OR (reg_argmax_val(14) AND rtlcarry_2(14)
)) OR (NOT(in_argmax_val(14)) AND rtlcarry_2(14)));
  rtlcarry_2(14) <= (((reg_argmax_val(13) AND NOT(in_argmax_val(13))) OR (reg_argmax_val(13) AND rtlcarry_2(13)
)) OR (NOT(in_argmax_val(13)) AND rtlcarry_2(13)));
  rtlcarry_2(13) <= (((reg_argmax_val(12) AND NOT(in_argmax_val(12))) OR (reg_argmax_val(12) AND rtlcarry_2(12)
)) OR (NOT(in_argmax_val(12)) AND rtlcarry_2(12)));
  rtlcarry_2(12) <= (((reg_argmax_val(11) AND NOT(in_argmax_val(11))) OR (reg_argmax_val(11) AND rtlcarry_2(11)
)) OR (NOT(in_argmax_val(11)) AND rtlcarry_2(11)));
  rtlcarry_2(11) <= (((reg_argmax_val(10) AND NOT(in_argmax_val(10))) OR (reg_argmax_val(10) AND rtlcarry_2(10)
)) OR (NOT(in_argmax_val(10)) AND rtlcarry_2(10)));
  rtlcarry_2(10) <= (((reg_argmax_val(9) AND NOT(in_argmax_val(9))) OR (reg_argmax_val(9) AND rtlcarry_2(9)
)) OR (NOT(in_argmax_val(9)) AND rtlcarry_2(9)));
  rtlcarry_2(9) <= (((reg_argmax_val(8) AND NOT(in_argmax_val(8))) OR (reg_argmax_val(8) AND rtlcarry_2(8)
)) OR (NOT(in_argmax_val(8)) AND rtlcarry_2(8)));
  rtlcarry_2(8) <= (((reg_argmax_val(7) AND NOT(in_argmax_val(7))) OR (reg_argmax_val(7) AND rtlcarry_2(7)
)) OR (NOT(in_argmax_val(7)) AND rtlcarry_2(7)));
  rtlcarry_2(7) <= (((reg_argmax_val(6) AND NOT(in_argmax_val(6))) OR (reg_argmax_val(6) AND rtlcarry_2(6)
)) OR (NOT(in_argmax_val(6)) AND rtlcarry_2(6)));
  rtlcarry_2(6) <= (((reg_argmax_val(5) AND NOT(in_argmax_val(5))) OR (reg_argmax_val(5) AND rtlcarry_2(5)
)) OR (NOT(in_argmax_val(5)) AND rtlcarry_2(5)));
  rtlcarry_2(5) <= (((reg_argmax_val(4) AND NOT(in_argmax_val(4))) OR (reg_argmax_val(4) AND rtlcarry_2(4)
)) OR (NOT(in_argmax_val(4)) AND rtlcarry_2(4)));
  rtlcarry_2(4) <= (((reg_argmax_val(3) AND NOT(in_argmax_val(3))) OR (reg_argmax_val(3) AND rtlcarry_2(3)
)) OR (NOT(in_argmax_val(3)) AND rtlcarry_2(3)));
  rtlcarry_2(3) <= (((reg_argmax_val(2) AND NOT(in_argmax_val(2))) OR (reg_argmax_val(2) AND rtlcarry_2(2)
)) OR (NOT(in_argmax_val(2)) AND rtlcarry_2(2)));
  rtlcarry_2(2) <= ((NOT(in_argmax_val(1)) AND (reg_argmax_val(1) OR rtlcarry_2(1))) OR (reg_argmax_val(1)
 AND rtlcarry_2(1)));
  rtlcarry_2(1) <= (((reg_argmax_val(0) AND NOT(in_argmax_val(0))) OR reg_argmax_val(0)) OR NOT(in_argmax_val(0)
));
  aux0 <= NOT((NOT(in_argmax_val(20)) AND rtlcarry_2(20)));
  aux1 <= (NOT(aux0) OR NOT(c_argmax));
  aux2 <= NOT((NOT(in_argmax_val(20)) OR rtlcarry_2(20)));
  aux3 <= NOT((NOT(aux2) AND reg_argmax_val(20)));
  aux4 <= (NOT(aux3) OR aux1);
  aux7 <= (aux3 AND ((NOT(reset) AND aux0) AND c_argmax));
  aux11 <= ((aux1 OR reg_argmax_val(20)) AND (NOT(reset) AND (NOT(aux2) OR NOT(c_argmax)))
);
END RTL;



-- Configuration for sxlib/VITAL library...
library sxlib;
use sxlib.vcomponents.all;

configuration CFG_argmax_boom of argmax_boom is
  for RTL
  end for;
end CFG_argmax_boom;
