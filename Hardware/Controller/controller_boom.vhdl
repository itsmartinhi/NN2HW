-- Generated by vxx2ghdl
--
-- Generated by VASY
--
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY controller_boom IS
PORT(
  clk	: IN STD_LOGIC;
  reset	: IN STD_LOGIC;
  in_ctrl_neuron_reset	: IN STD_LOGIC;
  in_ctrl_input_reset	: IN STD_LOGIC;
  c_dec_neuron	: OUT STD_LOGIC;
  c_dec_input	: OUT STD_LOGIC;
  c_add_to_neuron	: OUT STD_LOGIC;
  c_reset_register	: OUT STD_LOGIC;
  c_argmax	: OUT STD_LOGIC;
  halt	: OUT STD_LOGIC
);
END controller_boom;

ARCHITECTURE RTL OF controller_boom IS
  SIGNAL rtl_std_logic_vector_0	: STD_LOGIC_VECTOR(1 DOWNTO 0);
  SIGNAL state	: STD_LOGIC_VECTOR(0 TO 2);
  SIGNAL aux0	: STD_LOGIC;
  SIGNAL aux1	: STD_LOGIC;
  SIGNAL aux3	: STD_LOGIC;
  SIGNAL aux4	: STD_LOGIC;
  SIGNAL aux5	: STD_LOGIC;
BEGIN
  rtl_std_logic_vector_0 <= (((((state(1) AND in_ctrl_neuron_reset) OR state(2)) OR aux5) AND NOT(reset)) &
 (((aux3 OR (aux1 AND NOT(in_ctrl_neuron_reset))) OR aux4) AND NOT(reset)));
  c_dec_neuron <= aux1;
  c_dec_input <= (aux0 AND NOT(state(1)));
  c_add_to_neuron <= (NOT(state(2)) AND aux5);
  c_reset_register <= aux1;
  c_argmax <= (state(2) AND aux4);
  halt <= ((state(2) AND state(0)) AND NOT(state(1)));
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN state(0 to 1) <= rtl_std_logic_vector_0;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT(aux3) AND (NOT(state(1) AND NOT(in_ctrl_neuron_reset)) AND (state(0) AND 
NOT(reset)))) = '1')
    THEN state(2) <= '1';
    ELSIF ((aux3 OR (NOT(state(1) OR state(0)) OR reset)) = '1')
    THEN state(2) <= '0';
    END IF;
    END IF;
  END PROCESS;
  aux0 <= (NOT(state(2)) AND state(0));
  aux1 <= (aux0 AND state(1));
  aux3 <= NOT(((state(2) OR state(1)) OR in_ctrl_input_reset));
  aux4 <= (NOT(state(0)) AND NOT(state(1)));
  aux5 <= (NOT(state(0)) AND state(1));
END RTL;



-- Configuration for sxlib/VITAL library...
library sxlib;
use sxlib.vcomponents.all;

configuration CFG_controller_boom of controller_boom is
  for RTL
  end for;
end CFG_controller_boom;
