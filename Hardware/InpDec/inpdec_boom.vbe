-- VHDL data flow description generated from `inpdec_boom`
--		date : Tue Jul  5 13:04:03 2022


-- Entity Declaration

ENTITY inpdec_boom IS
  PORT (
  reset : in BIT;	-- reset
  clk : in BIT;	-- clk
  c_input_dec : in BIT;	-- c_input_dec
  out_input_index : out bit_vector(7 DOWNTO 0) ;	-- out_input_index
  out_input_reset : out BIT;	-- out_input_reset
  vdd : in BIT;	-- vdd
  vss : in BIT	-- vss
  );
END inpdec_boom;


-- Architecture Declaration

ARCHITECTURE behaviour_data_flow OF inpdec_boom IS
  SIGNAL rtlalc_5 : REG_VECTOR(1 DOWNTO 0) REGISTER;	-- rtlalc_5
  SIGNAL rtlalc_4 : REG_BIT REGISTER;	-- rtlalc_4
  SIGNAL rtlalc_3 : REG_VECTOR(5 DOWNTO 3) REGISTER;	-- rtlalc_3
  SIGNAL rtlalc_2 : REG_VECTOR(7 DOWNTO 6) REGISTER;	-- rtlalc_2
  SIGNAL rtlalc_1 : REG_BIT REGISTER;	-- rtlalc_1
  SIGNAL count : REG_VECTOR(8 DOWNTO 0) REGISTER;	-- count
  SIGNAL aux1 : BIT;		-- aux1
  SIGNAL aux2 : BIT;		-- aux2
  SIGNAL aux3 : BIT;		-- aux3
  SIGNAL aux7 : BIT;		-- aux7
  SIGNAL aux8 : BIT;		-- aux8
  SIGNAL aux9 : BIT;		-- aux9
  SIGNAL aux10 : BIT;		-- aux10
  SIGNAL aux12 : BIT;		-- aux12
  SIGNAL aux13 : BIT;		-- aux13
  SIGNAL aux14 : BIT;		-- aux14
  SIGNAL aux16 : BIT;		-- aux16
  SIGNAL aux17 : BIT;		-- aux17
  SIGNAL aux18 : BIT;		-- aux18
  SIGNAL aux19 : BIT;		-- aux19
  SIGNAL aux20 : BIT;		-- aux20
  SIGNAL aux21 : BIT;		-- aux21

BEGIN
  aux21 <= (NOT(count(7)) AND NOT(count(0)) AND aux3);
  aux20 <= (NOT(reset) AND NOT(aux12));
  aux19 <= (NOT(reset) AND aux12);
  aux18 <= NOT(NOT(aux17) AND aux21);
  aux17 <= NOT(NOT(aux16) AND NOT(count(6)));
  aux16 <= NOT((NOT(aux14) AND NOT(count(3))) AND NOT(
count(4)));
  aux14 <= NOT(NOT(count(5)) AND c_input_dec);
  aux13 <= NOT(c_input_dec AND NOT(count(3)));
  aux12 <= NOT((NOT(count(0)) AND NOT(count(1))) AND NOT(
count(2)));
  aux10 <= NOT(NOT(aux9) AND NOT(count(1)));
  aux9 <= (NOT(c_input_dec) OR count(0));
  aux8 <= (aux7 OR count(7));
  aux7 <= ((((count(5) OR count(3)) OR count(8)) OR 
count(4)) OR count(6));
  aux3 <= NOT(count(1) OR count(2));
  aux2 <= (NOT(c_input_dec) AND NOT(reset));
  aux1 <= ((c_input_dec AND NOT(reset)) AND NOT(count(0)));
  label0 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    count (0) <= GUARDED ((aux8 OR count(0) OR NOT(aux3)) AND ((aux2 AND 
count(0)) OR aux1));
  END BLOCK label0;
  label1 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    count (1) <= GUARDED ((aux8 OR count(1) OR count(2)) AND ((aux9 AND 
NOT(reset) AND count(1)) OR (aux1 AND NOT(count(1)))
));
  END BLOCK label1;
  label2 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    count (2) <= GUARDED (reset OR (aux10 AND count(2)) OR (NOT(aux10) AND
 NOT(count(2))));
  END BLOCK label2;
  label3 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    count (3) <= GUARDED ((count(3) AND aux19) OR (aux8 AND (c_input_dec 
XOR count(3)) AND aux20));
  END BLOCK label3;
  label4 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    count (4) <= GUARDED ((count(4) AND aux19) OR ((count(5) OR count(8) 
OR count(4) OR count(6) OR count(7)) AND (NOT(aux13
) XOR count(4)) AND aux20));
  END BLOCK label4;
  label5 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    count (5) <= GUARDED ((count(5) AND aux19) OR (aux8 AND NOT(count(5) 
XOR (aux13 OR count(4))) AND aux20));
  END BLOCK label5;
  label6 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    count (6) <= GUARDED (((count(6) OR reset) AND aux12) OR (((NOT(aux16)
 XOR count(6)) OR reset) AND NOT(aux12)));
  END BLOCK label6;
  label7 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    count (7) <= GUARDED ((aux17 AND count(7)) OR reset OR (count(7) AND 
aux12) OR NOT(aux18));
  END BLOCK label7;
  label8 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    count (8) <= GUARDED (aux18 AND count(8) AND NOT(reset));
  END BLOCK label8;
  label9 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    rtlalc_1 <= GUARDED (((c_input_dec OR rtlalc_1) AND NOT(aux7) AND NOT
(reset) AND aux21) OR (aux2 AND rtlalc_1));
  END BLOCK label9;
  label10 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    rtlalc_2 (6) <= GUARDED ((NOT(c_input_dec) AND rtlalc_2(6)) OR (
c_input_dec AND count(6)) OR reset);
  END BLOCK label10;
  label11 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    rtlalc_2 (7) <= GUARDED ((NOT(c_input_dec) AND rtlalc_2(7)) OR (
c_input_dec AND count(7)) OR reset);
  END BLOCK label11;
  label12 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    rtlalc_3 (3) <= GUARDED ((c_input_dec OR rtlalc_3(3)) AND aux13 AND NOT(
reset));
  END BLOCK label12;
  label13 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    rtlalc_3 (4) <= GUARDED ((c_input_dec OR rtlalc_3(4)) AND (NOT(
c_input_dec) OR count(4)) AND NOT(reset));
  END BLOCK label13;
  label14 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    rtlalc_3 (5) <= GUARDED ((c_input_dec OR rtlalc_3(5)) AND aux14 AND NOT(
reset));
  END BLOCK label14;
  label15 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    rtlalc_4 <= GUARDED ((c_input_dec AND count(2)) OR (NOT(c_input_dec) 
AND rtlalc_4) OR reset);
  END BLOCK label15;
  label16 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    rtlalc_5 (0) <= GUARDED (aux9 AND (c_input_dec OR rtlalc_5(0)) AND NOT(
reset));
  END BLOCK label16;
  label17 : BLOCK ((NOT((clk'STABLE)) AND clk) = '1')
  BEGIN
    rtlalc_5 (1) <= GUARDED ((NOT(c_input_dec) OR count(1)) AND (rtlalc_5(1) 
OR c_input_dec) AND NOT(reset));
  END BLOCK label17;

out_input_reset <= rtlalc_1;

out_input_index (0) <= rtlalc_5(0);

out_input_index (1) <= rtlalc_5(1);

out_input_index (2) <= rtlalc_4;

out_input_index (3) <= rtlalc_3(3);

out_input_index (4) <= rtlalc_3(4);

out_input_index (5) <= rtlalc_3(5);

out_input_index (6) <= rtlalc_2(6);

out_input_index (7) <= rtlalc_2(7);
END;
