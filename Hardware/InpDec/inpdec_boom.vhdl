-- Generated by vxx2ghdl
--
-- Generated by VASY
--
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY inpdec_boom IS
PORT(
  reset	: IN STD_LOGIC;
  clk	: IN STD_LOGIC;
  c_input_dec	: IN STD_LOGIC;
  out_input_index	: OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
  out_input_reset	: OUT STD_LOGIC
);
END inpdec_boom;

ARCHITECTURE RTL OF inpdec_boom IS
  SIGNAL rtlalc_5	: STD_LOGIC_VECTOR(1 DOWNTO 0);
  SIGNAL rtlalc_4	: STD_LOGIC;
  SIGNAL rtlalc_3	: STD_LOGIC_VECTOR(5 DOWNTO 3);
  SIGNAL rtlalc_2	: STD_LOGIC_VECTOR(7 DOWNTO 6);
  SIGNAL rtlalc_1	: STD_LOGIC;
  SIGNAL count	: STD_LOGIC_VECTOR(8 DOWNTO 0);
  SIGNAL aux1	: STD_LOGIC;
  SIGNAL aux2	: STD_LOGIC;
  SIGNAL aux3	: STD_LOGIC;
  SIGNAL aux4	: STD_LOGIC;
  SIGNAL aux5	: STD_LOGIC;
  SIGNAL aux6	: STD_LOGIC;
  SIGNAL aux8	: STD_LOGIC;
  SIGNAL aux9	: STD_LOGIC;
  SIGNAL aux12	: STD_LOGIC;
  SIGNAL aux13	: STD_LOGIC;
  SIGNAL aux15	: STD_LOGIC;
  SIGNAL aux16	: STD_LOGIC;
  SIGNAL aux19	: STD_LOGIC;
  SIGNAL aux20	: STD_LOGIC;
  SIGNAL aux22	: STD_LOGIC;
  SIGNAL aux23	: STD_LOGIC;
BEGIN
  out_input_index(7) <= rtlalc_2(7);
  out_input_index(6) <= rtlalc_2(6);
  out_input_index(5) <= rtlalc_3(5);
  out_input_index(4) <= rtlalc_3(4);
  out_input_index(3) <= rtlalc_3(3);
  out_input_index(2) <= rtlalc_4;
  out_input_index(1) <= rtlalc_5(1);
  out_input_index(0) <= rtlalc_5(0);
  out_input_reset <= rtlalc_1;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (reset = '1')
    THEN rtlalc_5(1) <= '0';
    ELSIF ((NOT(reset) AND c_input_dec) = '1')
    THEN rtlalc_5(1) <= count(1);
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux6 AND (NOT(reset) AND c_input_dec)) = '1')
    THEN rtlalc_5(0) <= '1';
    ELSIF ((NOT(aux6) OR reset) = '1')
    THEN rtlalc_5(0) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (reset = '1')
    THEN rtlalc_4 <= '1';
    ELSIF ((NOT(reset) AND c_input_dec) = '1')
    THEN rtlalc_4 <= count(2);
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (reset = '1')
    THEN rtlalc_3(5) <= '0';
    ELSIF ((NOT(reset) AND c_input_dec) = '1')
    THEN rtlalc_3(5) <= count(5);
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT(c_input_dec) AND reset) = '1')
    THEN rtlalc_3(4) <= '0';
    ELSIF (c_input_dec = '1')
    THEN rtlalc_3(4) <= aux9;
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (reset = '1')
    THEN rtlalc_3(3) <= '0';
    ELSIF ((NOT(reset) AND c_input_dec) = '1')
    THEN rtlalc_3(3) <= count(3);
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (reset = '1')
    THEN rtlalc_2(7) <= '1';
    ELSIF ((c_input_dec AND NOT(reset)) = '1')
    THEN rtlalc_2(7) <= count(7);
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (reset = '1')
    THEN rtlalc_2(6) <= '1';
    ELSIF ((NOT(reset) AND c_input_dec) = '1')
    THEN rtlalc_2(6) <= count(6);
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT(reset) AND (NOT(aux1) AND NOT(aux22))) = '1')
    THEN rtlalc_1 <= '1';
    ELSIF ((NOT(reset) AND ((aux1 OR aux22) AND c_input_dec)) = '1')
    THEN rtlalc_1 <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((reset OR NOT(aux15)) = '1')
    THEN count(8) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((reset OR NOT(aux15)) = '1')
    THEN count(7) <= '1';
    ELSIF ((NOT(reset) AND (NOT(aux13) AND aux15)) = '1')
    THEN count(7) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT(aux13) OR reset) = '1')
    THEN count(6) <= '1';
    ELSIF ((NOT(aux3) AND (NOT(aux12) AND (aux13 AND NOT(reset)))) = '1')
    THEN count(6) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (NOT(aux23) = '1')
    THEN count(5) <= '0';
    ELSIF ((aux23 AND (NOT(aux8) AND (NOT(count(4)) AND (c_input_dec AND NOT(count(0)))))
) = '1')
    THEN count(5) <= NOT(count(5));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (((count(5) OR aux19) AND (NOT(aux6) AND (NOT(reset) AND (aux8 AND (NOT(count(3)
) AND (NOT(count(2)) AND NOT(count(1)))))))) = '1')
    THEN count(4) <= '1';
    ELSIF ((NOT(count(5) OR aux19) OR (NOT(aux6) AND (reset OR (NOT(aux8) AND (count(3) 
OR (count(2) OR count(1))))))) = '1')
    THEN count(4) <= '0';
    ELSIF (((count(5) OR aux19) AND (aux6 OR (NOT(reset) AND (NOT(aux8) AND (NOT(count(3)
) AND (NOT(count(2)) AND NOT(count(1)))))))) = '1')
    THEN count(4) <= ((aux6 AND aux9) OR (NOT(aux6) AND NOT(count(4))));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (NOT(aux23) = '1')
    THEN count(3) <= '0';
    ELSIF ((aux23 AND (NOT(count(2)) AND NOT(aux20))) = '1')
    THEN count(3) <= NOT(count(3));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (reset = '1')
    THEN count(2) <= '1';
    ELSIF ((NOT(reset) AND NOT(aux20)) = '1')
    THEN count(2) <= NOT(count(2));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT(aux2 OR aux19) OR reset) = '1')
    THEN count(1) <= '0';
    ELSIF (((aux2 OR aux19) AND (NOT(reset) AND NOT(aux6))) = '1')
    THEN count(1) <= NOT(count(1));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT(aux5 OR aux16) OR reset) = '1')
    THEN count(0) <= '0';
    ELSIF (((aux5 OR aux16) AND (NOT(reset) AND c_input_dec)) = '1')
    THEN count(0) <= NOT(count(0));
    END IF;
    END IF;
  END PROCESS;
  aux1 <= (count(5) OR count(3));
  aux2 <= (aux1 OR count(2));
  aux3 <= (aux2 OR count(1));
  aux4 <= (aux3 OR count(6));
  aux5 <= (aux4 OR count(4));
  aux6 <= (NOT(c_input_dec) OR count(0));
  aux8 <= ((count(3) OR count(2)) OR count(1));
  aux9 <= (NOT(reset) AND count(4));
  aux12 <= NOT(((NOT(count(4)) AND c_input_dec) AND NOT(count(0))));
  aux13 <= NOT((NOT(aux4) AND NOT(aux12)));
  aux15 <= NOT((NOT(aux13) AND NOT(count(7))));
  aux16 <= (count(0) OR (count(7) OR count(8)));
  aux19 <= (count(6) OR (count(4) OR (NOT(c_input_dec) OR aux16)));
  aux20 <= ((count(1) OR NOT(c_input_dec)) OR count(0));
  aux22 <= (count(2) OR (count(1) OR aux19));
  aux23 <= ((count(5) OR aux22) AND NOT(reset));
END RTL;



-- Configuration for sxlib/VITAL library...
library sxlib;
use sxlib.vcomponents.all;

configuration CFG_inpdec_boom of inpdec_boom is
  for RTL
  end for;
end CFG_inpdec_boom;
