--
-- Generated by VASY
--
ENTITY multiplier_vasy IS
PORT(
  a	: IN BIT_VECTOR(7 DOWNTO 0);
  b	: IN BIT_VECTOR(2 DOWNTO 0);
  s	: OUT BIT_VECTOR(10 DOWNTO 0);
  vdd	: IN BIT;
  vss	: IN BIT
);
END multiplier_vasy;

ARCHITECTURE VST OF multiplier_vasy IS

  SIGNAL ab0	: BIT_VECTOR(7 DOWNTO 0);
  SIGNAL ab1	: BIT_VECTOR(7 DOWNTO 0);
  SIGNAL ab2	: BIT_VECTOR(7 DOWNTO 0);
  SIGNAL c1	: BIT_VECTOR(7 DOWNTO 0);
  SIGNAL c2	: BIT_VECTOR(7 DOWNTO 0);
  SIGNAL p1	: BIT_VECTOR(7 DOWNTO 0);
  COMPONENT and2
  PORT(
  vss	: IN BIT;
  vdd	: IN BIT;
  x	: IN BIT;
  y	: IN BIT;
  z	: OUT BIT
  );
  END COMPONENT;

  COMPONENT half_adder
  PORT(
  vss	: IN BIT;
  vdd	: IN BIT;
  a	: IN BIT;
  b	: IN BIT;
  sum	: OUT BIT;
  carry	: OUT BIT
  );
  END COMPONENT;

  COMPONENT full_adder
  PORT(
  vss	: IN BIT;
  vdd	: IN BIT;
  a	: IN BIT;
  b	: IN BIT;
  cin	: IN BIT;
  sum	: OUT BIT;
  carry	: OUT BIT
  );
  END COMPONENT;

BEGIN

  ha3 : half_adder
  PORT MAP (
    carry => c2(0),
    sum => s(2),
    b => ab2(0),
    a => p1(1),
    vdd => vdd,
    vss => vss
  );
  ha2 : half_adder
  PORT MAP (
    carry => c1(7),
    sum => p1(7),
    b => c2(5),
    a => ab1(7),
    vdd => vdd,
    vss => vss
  );
  ha1 : half_adder
  PORT MAP (
    carry => c1(0),
    sum => s(1),
    b => ab1(0),
    a => ab0(1),
    vdd => vdd,
    vss => vss
  );
  fa13 : full_adder
  PORT MAP (
    carry => s(10),
    sum => s(9),
    cin => c2(6),
    b => c1(7),
    a => ab2(7),
    vdd => vdd,
    vss => vss
  );
  fa12 : full_adder
  PORT MAP (
    carry => c2(6),
    sum => s(8),
    cin => c1(6),
    b => p1(7),
    a => ab2(6),
    vdd => vdd,
    vss => vss
  );
  fa11 : full_adder
  PORT MAP (
    carry => c2(5),
    sum => s(7),
    cin => c1(5),
    b => p1(6),
    a => ab2(5),
    vdd => vdd,
    vss => vss
  );
  fa10 : full_adder
  PORT MAP (
    carry => c2(4),
    sum => s(6),
    cin => c1(4),
    b => p1(5),
    a => ab2(4),
    vdd => vdd,
    vss => vss
  );
  fa9 : full_adder
  PORT MAP (
    carry => c2(3),
    sum => s(5),
    cin => c1(3),
    b => p1(4),
    a => ab2(3),
    vdd => vdd,
    vss => vss
  );
  fa8 : full_adder
  PORT MAP (
    carry => c2(2),
    sum => s(4),
    cin => c1(2),
    b => p1(3),
    a => ab2(2),
    vdd => vdd,
    vss => vss
  );
  fa7 : full_adder
  PORT MAP (
    carry => c2(1),
    sum => s(3),
    cin => c1(1),
    b => p1(2),
    a => ab2(1),
    vdd => vdd,
    vss => vss
  );
  fa6 : full_adder
  PORT MAP (
    carry => c1(6),
    sum => p1(6),
    cin => c2(4),
    b => ab1(6),
    a => ab0(7),
    vdd => vdd,
    vss => vss
  );
  fa5 : full_adder
  PORT MAP (
    carry => c1(5),
    sum => p1(5),
    cin => c2(3),
    b => ab1(5),
    a => ab0(6),
    vdd => vdd,
    vss => vss
  );
  fa4 : full_adder
  PORT MAP (
    carry => c1(4),
    sum => p1(4),
    cin => c2(2),
    b => ab1(4),
    a => ab0(5),
    vdd => vdd,
    vss => vss
  );
  fa3 : full_adder
  PORT MAP (
    carry => c1(3),
    sum => p1(3),
    cin => c2(1),
    b => ab1(3),
    a => ab0(4),
    vdd => vdd,
    vss => vss
  );
  fa2 : full_adder
  PORT MAP (
    carry => c1(2),
    sum => p1(2),
    cin => c2(0),
    b => ab1(2),
    a => ab0(3),
    vdd => vdd,
    vss => vss
  );
  fa1 : full_adder
  PORT MAP (
    carry => c1(1),
    sum => p1(1),
    cin => c1(0),
    b => ab1(1),
    a => ab0(2),
    vdd => vdd,
    vss => vss
  );
  and25 : and2
  PORT MAP (
    z => ab2(7),
    y => b(2),
    x => a(7),
    vdd => vdd,
    vss => vss
  );
  and24 : and2
  PORT MAP (
    z => ab2(6),
    y => b(2),
    x => a(6),
    vdd => vdd,
    vss => vss
  );
  and23 : and2
  PORT MAP (
    z => ab2(5),
    y => b(2),
    x => a(5),
    vdd => vdd,
    vss => vss
  );
  and22 : and2
  PORT MAP (
    z => ab2(4),
    y => b(2),
    x => a(4),
    vdd => vdd,
    vss => vss
  );
  and21 : and2
  PORT MAP (
    z => ab2(3),
    y => b(2),
    x => a(3),
    vdd => vdd,
    vss => vss
  );
  and20 : and2
  PORT MAP (
    z => ab2(2),
    y => b(2),
    x => a(2),
    vdd => vdd,
    vss => vss
  );
  and19 : and2
  PORT MAP (
    z => ab2(1),
    y => b(2),
    x => a(1),
    vdd => vdd,
    vss => vss
  );
  and18 : and2
  PORT MAP (
    z => ab2(0),
    y => b(2),
    x => a(0),
    vdd => vdd,
    vss => vss
  );
  and17 : and2
  PORT MAP (
    z => ab1(7),
    y => b(1),
    x => a(7),
    vdd => vdd,
    vss => vss
  );
  and16 : and2
  PORT MAP (
    z => ab1(6),
    y => b(1),
    x => a(6),
    vdd => vdd,
    vss => vss
  );
  and15 : and2
  PORT MAP (
    z => ab1(5),
    y => b(1),
    x => a(5),
    vdd => vdd,
    vss => vss
  );
  and14 : and2
  PORT MAP (
    z => ab1(4),
    y => b(1),
    x => a(4),
    vdd => vdd,
    vss => vss
  );
  and13 : and2
  PORT MAP (
    z => ab1(3),
    y => b(1),
    x => a(3),
    vdd => vdd,
    vss => vss
  );
  and12 : and2
  PORT MAP (
    z => ab1(2),
    y => b(1),
    x => a(2),
    vdd => vdd,
    vss => vss
  );
  and11 : and2
  PORT MAP (
    z => ab1(1),
    y => b(1),
    x => a(1),
    vdd => vdd,
    vss => vss
  );
  and10 : and2
  PORT MAP (
    z => ab1(0),
    y => b(1),
    x => a(0),
    vdd => vdd,
    vss => vss
  );
  and9 : and2
  PORT MAP (
    z => ab1(0),
    y => b(1),
    x => a(0),
    vdd => vdd,
    vss => vss
  );
  and8 : and2
  PORT MAP (
    z => ab0(7),
    y => b(0),
    x => a(7),
    vdd => vdd,
    vss => vss
  );
  and7 : and2
  PORT MAP (
    z => ab0(6),
    y => b(0),
    x => a(6),
    vdd => vdd,
    vss => vss
  );
  and6 : and2
  PORT MAP (
    z => ab0(5),
    y => b(0),
    x => a(5),
    vdd => vdd,
    vss => vss
  );
  and5 : and2
  PORT MAP (
    z => ab0(4),
    y => b(0),
    x => a(4),
    vdd => vdd,
    vss => vss
  );
  and4 : and2
  PORT MAP (
    z => ab0(3),
    y => b(0),
    x => a(3),
    vdd => vdd,
    vss => vss
  );
  and3 : and2
  PORT MAP (
    z => ab0(2),
    y => b(0),
    x => a(2),
    vdd => vdd,
    vss => vss
  );
  and2x : and2
  PORT MAP (
    z => ab0(1),
    y => b(0),
    x => a(1),
    vdd => vdd,
    vss => vss
  );
  and1 : and2
  PORT MAP (
    z => s(0),
    y => b(0),
    x => a(0),
    vdd => vdd,
    vss => vss
  );
END VST;
