-- Generated by vxx2ghdl
--
-- Generated by VASY
--
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY neuronreg_boom IS
PORT(
  clk	: IN STD_LOGIC;
  reset	: IN STD_LOGIC;
  c_nreg	: IN STD_LOGIC;
  in_nreg_val	: IN STD_LOGIC_VECTOR(11 DOWNTO 0);
  out_nreg_val	: OUT STD_LOGIC_VECTOR(20 DOWNTO 0)
);
END neuronreg_boom;

ARCHITECTURE RTL OF neuronreg_boom IS
  SIGNAL rtl_std_logic_vector_3	: STD_LOGIC_VECTOR(1 DOWNTO 0);
  SIGNAL rtl_std_logic_vector_2	: STD_LOGIC_VECTOR(1 DOWNTO 0);
  SIGNAL rtl_std_logic_vector_1	: STD_LOGIC_VECTOR(1 DOWNTO 0);
  SIGNAL rtl_std_logic_vector_0	: STD_LOGIC_VECTOR(1 DOWNTO 0);
  SIGNAL rtlalc_1	: STD_LOGIC_VECTOR(20 DOWNTO 0);
  SIGNAL reg_nreg	: STD_LOGIC_VECTOR(20 DOWNTO 0);
  SIGNAL rtlcarry_0	: STD_LOGIC_VECTOR(19 DOWNTO 1);
  SIGNAL aux0	: STD_LOGIC;
  SIGNAL aux1	: STD_LOGIC;
  SIGNAL aux2	: STD_LOGIC;
  SIGNAL aux3	: STD_LOGIC;
  SIGNAL aux4	: STD_LOGIC;
  SIGNAL aux5	: STD_LOGIC;
  SIGNAL aux6	: STD_LOGIC;
  SIGNAL aux7	: STD_LOGIC;
  SIGNAL aux8	: STD_LOGIC;
  SIGNAL aux9	: STD_LOGIC;
  SIGNAL aux10	: STD_LOGIC;
  SIGNAL aux11	: STD_LOGIC;
  SIGNAL aux12	: STD_LOGIC;
  SIGNAL aux13	: STD_LOGIC;
  SIGNAL aux14	: STD_LOGIC;
  SIGNAL aux15	: STD_LOGIC;
  SIGNAL aux16	: STD_LOGIC;
  SIGNAL aux17	: STD_LOGIC;
  SIGNAL aux19	: STD_LOGIC;
  SIGNAL aux20	: STD_LOGIC;
  SIGNAL aux21	: STD_LOGIC;
  SIGNAL aux22	: STD_LOGIC;
  SIGNAL aux23	: STD_LOGIC;
  SIGNAL aux25	: STD_LOGIC;
  SIGNAL aux26	: STD_LOGIC;
  SIGNAL aux27	: STD_LOGIC;
  SIGNAL aux28	: STD_LOGIC;
  SIGNAL aux29	: STD_LOGIC;
  SIGNAL aux30	: STD_LOGIC;
  SIGNAL aux31	: STD_LOGIC;
  SIGNAL aux32	: STD_LOGIC;
  SIGNAL aux33	: STD_LOGIC;
  SIGNAL aux34	: STD_LOGIC;
  SIGNAL aux35	: STD_LOGIC;
  SIGNAL aux36	: STD_LOGIC;
  SIGNAL aux37	: STD_LOGIC;
  SIGNAL aux38	: STD_LOGIC;
  SIGNAL aux39	: STD_LOGIC;
  SIGNAL aux40	: STD_LOGIC;
  SIGNAL aux41	: STD_LOGIC;
  SIGNAL aux42	: STD_LOGIC;
  SIGNAL aux43	: STD_LOGIC;
  SIGNAL aux44	: STD_LOGIC;
  SIGNAL aux45	: STD_LOGIC;
  SIGNAL aux46	: STD_LOGIC;
  SIGNAL aux47	: STD_LOGIC;
  SIGNAL aux48	: STD_LOGIC;
  SIGNAL aux49	: STD_LOGIC;
  SIGNAL aux50	: STD_LOGIC;
  SIGNAL aux51	: STD_LOGIC;
  SIGNAL aux52	: STD_LOGIC;
  SIGNAL aux53	: STD_LOGIC;
  SIGNAL aux54	: STD_LOGIC;
  SIGNAL aux55	: STD_LOGIC;
  SIGNAL aux56	: STD_LOGIC;
BEGIN
  rtl_std_logic_vector_3 <= (((aux11 AND aux41) OR (NOT(aux11) AND aux42)) & ((aux9 AND aux39) OR (NOT(aux9
) AND aux40)));
  rtl_std_logic_vector_2 <= (((aux14 AND aux45) OR (NOT(aux14) AND aux46)) & ((aux13 AND aux43) OR (NOT(aux13
) AND aux44)));
  rtl_std_logic_vector_1 <= (((aux20 AND aux50) OR (NOT(aux20) AND aux51)) & ((NOT(aux17) AND aux49) OR aux19
));
  rtl_std_logic_vector_0 <= ((aux38 AND ((reg_nreg(19) AND NOT(aux22)) OR (NOT(reg_nreg(19)) AND (NOT(c_nreg
) OR rtlcarry_0(19))))) & (aux37 AND ((reg_nreg(18) AND aux21) OR (NOT(reg_nreg(18)
) AND (NOT(c_nreg) OR rtlcarry_0(18))))));
  out_nreg_val(20) <= rtlalc_1(20);
  out_nreg_val(19) <= rtlalc_1(19);
  out_nreg_val(18) <= rtlalc_1(18);
  out_nreg_val(17) <= rtlalc_1(17);
  out_nreg_val(16) <= rtlalc_1(16);
  out_nreg_val(15) <= rtlalc_1(15);
  out_nreg_val(14) <= rtlalc_1(14);
  out_nreg_val(13) <= rtlalc_1(13);
  out_nreg_val(12) <= rtlalc_1(12);
  out_nreg_val(11) <= rtlalc_1(11);
  out_nreg_val(10) <= rtlalc_1(10);
  out_nreg_val(9) <= rtlalc_1(9);
  out_nreg_val(8) <= rtlalc_1(8);
  out_nreg_val(7) <= rtlalc_1(7);
  out_nreg_val(6) <= rtlalc_1(6);
  out_nreg_val(5) <= rtlalc_1(5);
  out_nreg_val(4) <= rtlalc_1(4);
  out_nreg_val(3) <= rtlalc_1(3);
  out_nreg_val(2) <= rtlalc_1(2);
  out_nreg_val(1) <= rtlalc_1(1);
  out_nreg_val(0) <= rtlalc_1(0);
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux25 OR (c_nreg AND (aux25 OR (NOT(rtlcarry_0(19) AND reg_nreg(19)) AND (aux52
 OR aux25))))) = '1')
    THEN rtlalc_1(20) <= '1';
    ELSIF ((NOT(aux26) AND ((NOT(aux52) AND NOT(aux25)) OR ((rtlcarry_0(19) AND (reg_nreg(19)
 AND NOT(aux25))) OR (NOT(c_nreg) AND NOT(aux25))))) = '1')
    THEN rtlalc_1(20) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (NOT(reset) = '1')
    THEN rtlalc_1(19 downto 18) <= rtl_std_logic_vector_0;
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux36 AND ((rtlcarry_0(17) AND aux51) OR (NOT(rtlcarry_0(17)) AND aux50))) = '1'
)
    THEN rtlalc_1(17) <= '1';
    ELSIF ((NOT(aux26) AND (NOT(aux36) OR ((rtlcarry_0(17) AND NOT(aux51)) OR (NOT(rtlcarry_0(17)
) AND NOT(aux50))))) = '1')
    THEN rtlalc_1(17) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (((c_nreg AND (NOT(rtlcarry_0(16)) AND aux49)) OR aux19) = '1')
    THEN rtlalc_1(16) <= '1';
    ELSIF ((NOT(aux26) AND (NOT((c_nreg AND (NOT(rtlcarry_0(16)) AND aux49))) AND NOT(aux19
))) = '1')
    THEN rtlalc_1(16) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (NOT(reset) = '1')
    THEN rtlalc_1(15) <= (aux35 AND ((reg_nreg(15) AND aux16) OR (NOT(reg_nreg(15)) AND (NOT(c_nreg) OR rtlcarry_0(15)
))));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux34 AND ((rtlcarry_0(14) AND aux48) OR (NOT(rtlcarry_0(14)) AND aux47))) = '1'
)
    THEN rtlalc_1(14) <= '1';
    ELSIF ((NOT(aux26) AND (NOT(aux34) OR ((rtlcarry_0(14) AND NOT(aux48)) OR (NOT(rtlcarry_0(14)
) AND NOT(aux47))))) = '1')
    THEN rtlalc_1(14) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT(aux26) AND (NOT(c_nreg) OR ((reg_nreg(13) XOR rtlcarry_0(13)) OR reset)))
 = '1')
    THEN rtlalc_1(13) <= '1';
    ELSIF ((c_nreg AND (NOT(reg_nreg(13) XOR rtlcarry_0(13)) AND NOT(reset))) = '1')
    THEN rtlalc_1(13) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux33 AND ((rtlcarry_0(12) AND aux46) OR (NOT(rtlcarry_0(12)) AND aux45))) = '1'
)
    THEN rtlalc_1(12) <= '1';
    ELSIF ((NOT(aux26) AND (NOT(aux33) OR ((rtlcarry_0(12) AND NOT(aux46)) OR (NOT(rtlcarry_0(12)
) AND NOT(aux45))))) = '1')
    THEN rtlalc_1(12) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux32 AND ((aux12 AND aux43) OR (NOT(aux12) AND aux44))) = '1')
    THEN rtlalc_1(11) <= '1';
    ELSIF ((NOT(aux26) AND (NOT(aux32) OR ((aux12 AND NOT(aux43)) OR (NOT(aux12) AND NOT(aux44
))))) = '1')
    THEN rtlalc_1(11) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT(reset) AND c_nreg) = '1')
    THEN rtlalc_1(10) <= (reg_nreg(10) XOR aux56);
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux31 AND ((aux10 AND aux41) OR (NOT(aux10) AND aux42))) = '1')
    THEN rtlalc_1(9) <= '1';
    ELSIF ((NOT(aux26) AND (NOT(aux31) OR ((aux10 AND NOT(aux41)) OR (NOT(aux10) AND NOT(aux42
))))) = '1')
    THEN rtlalc_1(9) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux30 AND ((aux8 AND aux39) OR (NOT(aux8) AND aux40))) = '1')
    THEN rtlalc_1(8) <= '1';
    ELSIF ((NOT(aux26) AND (NOT(aux30) OR ((aux8 AND NOT(aux39)) OR (NOT(aux8) AND NOT(aux40
))))) = '1')
    THEN rtlalc_1(8) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (NOT(aux26) = '1')
    THEN rtlalc_1(7) <= NOT(reg_nreg(7) XOR aux6);
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (NOT(reset) = '1')
    THEN rtlalc_1(6) <= (aux29 AND ((reg_nreg(6) AND aux5) OR (NOT(reg_nreg(6)) AND (NOT(c_nreg) OR aux4
))));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT(reset) AND c_nreg) = '1')
    THEN rtlalc_1(5) <= (reg_nreg(5) XOR aux55);
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT(aux26) AND (NOT(c_nreg) OR ((reg_nreg(4) XOR aux54) OR reset))) = '1')
    THEN rtlalc_1(4) <= '1';
    ELSIF ((c_nreg AND (NOT(reg_nreg(4) XOR aux54) AND NOT(reset))) = '1')
    THEN rtlalc_1(4) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux28 AND NOT(reg_nreg(3) XOR aux2)) = '1')
    THEN rtlalc_1(3) <= '1';
    ELSIF ((NOT(aux26) AND (NOT(aux28) OR (reg_nreg(3) XOR aux2))) = '1')
    THEN rtlalc_1(3) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (NOT(reset) = '1')
    THEN rtlalc_1(2) <= (aux27 AND ((reg_nreg(2) AND aux1) OR (NOT(reg_nreg(2)) AND (NOT(c_nreg) OR aux0
))));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT(aux26) AND (NOT(c_nreg) OR ((reg_nreg(1) XOR aux53) OR reset))) = '1')
    THEN rtlalc_1(1) <= '1';
    ELSIF ((c_nreg AND (NOT(reg_nreg(1) XOR aux53) AND NOT(reset))) = '1')
    THEN rtlalc_1(1) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT(aux26) AND (NOT(c_nreg) OR ((reg_nreg(0) XOR in_nreg_val(0)) OR reset))) 
= '1')
    THEN rtlalc_1(0) <= '1';
    ELSIF ((c_nreg AND (NOT(reg_nreg(0) XOR in_nreg_val(0)) AND NOT(reset))) = '1')
    THEN rtlalc_1(0) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN reg_nreg(20) <= ((NOT(aux23) AND aux52) OR aux25);
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (reset = '1')
    THEN reg_nreg(19) <= '0';
    ELSIF ((NOT(reset) AND aux22) = '1')
    THEN reg_nreg(19) <= NOT(reg_nreg(19));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (reset = '1')
    THEN reg_nreg(18) <= '0';
    ELSIF ((NOT(reset) AND NOT(aux21)) = '1')
    THEN reg_nreg(18) <= NOT(reg_nreg(18));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN reg_nreg(17 downto 16) <= rtl_std_logic_vector_1;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (reset = '1')
    THEN reg_nreg(15) <= '0';
    ELSIF ((NOT(reset) AND NOT(aux16)) = '1')
    THEN reg_nreg(15) <= NOT(reg_nreg(15));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN reg_nreg(14) <= ((aux15 AND aux47) OR (NOT(aux15) AND aux48));
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (reset = '1')
    THEN reg_nreg(13) <= '0';
    ELSIF ((c_nreg AND (rtlcarry_0(13) AND NOT(reset))) = '1')
    THEN reg_nreg(13) <= NOT(reg_nreg(13));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN reg_nreg(12 downto 11) <= rtl_std_logic_vector_2;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (reset = '1')
    THEN reg_nreg(10) <= '0';
    ELSIF ((c_nreg AND (aux56 AND NOT(reset))) = '1')
    THEN reg_nreg(10) <= NOT(reg_nreg(10));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN reg_nreg(9 downto 8) <= rtl_std_logic_vector_3;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (reset = '1')
    THEN reg_nreg(7) <= '0';
    ELSIF ((NOT(reset) AND NOT(aux7)) = '1')
    THEN reg_nreg(7) <= NOT(reg_nreg(7));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (reset = '1')
    THEN reg_nreg(6) <= '0';
    ELSIF ((NOT(reset) AND NOT(aux5)) = '1')
    THEN reg_nreg(6) <= NOT(reg_nreg(6));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (reset = '1')
    THEN reg_nreg(5) <= '0';
    ELSIF ((c_nreg AND (aux55 AND NOT(reset))) = '1')
    THEN reg_nreg(5) <= NOT(reg_nreg(5));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (reset = '1')
    THEN reg_nreg(4) <= '0';
    ELSIF ((c_nreg AND (aux54 AND NOT(reset))) = '1')
    THEN reg_nreg(4) <= NOT(reg_nreg(4));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (reset = '1')
    THEN reg_nreg(3) <= '0';
    ELSIF ((NOT(reset) AND NOT(aux3)) = '1')
    THEN reg_nreg(3) <= NOT(reg_nreg(3));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (reset = '1')
    THEN reg_nreg(2) <= '0';
    ELSIF ((NOT(reset) AND NOT(aux1)) = '1')
    THEN reg_nreg(2) <= NOT(reg_nreg(2));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (reset = '1')
    THEN reg_nreg(1) <= '0';
    ELSIF ((c_nreg AND (aux53 AND NOT(reset))) = '1')
    THEN reg_nreg(1) <= NOT(reg_nreg(1));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (reset = '1')
    THEN reg_nreg(0) <= '0';
    ELSIF ((c_nreg AND (in_nreg_val(0) AND NOT(reset))) = '1')
    THEN reg_nreg(0) <= NOT(reg_nreg(0));
    END IF;
    END IF;
  END PROCESS;
  rtlcarry_0(19) <= (rtlcarry_0(18) AND reg_nreg(18));
  rtlcarry_0(18) <= (rtlcarry_0(17) AND reg_nreg(17));
  rtlcarry_0(17) <= (rtlcarry_0(16) AND reg_nreg(16));
  rtlcarry_0(16) <= (rtlcarry_0(15) AND reg_nreg(15));
  rtlcarry_0(15) <= (rtlcarry_0(14) AND reg_nreg(14));
  rtlcarry_0(14) <= (rtlcarry_0(13) AND reg_nreg(13));
  rtlcarry_0(13) <= (rtlcarry_0(12) AND reg_nreg(12));
  rtlcarry_0(12) <= ((rtlcarry_0(11) AND (reg_nreg(11) OR in_nreg_val(11))) OR (reg_nreg(11) AND in_nreg_val(11)
));
  rtlcarry_0(11) <= ((rtlcarry_0(10) AND (reg_nreg(10) OR in_nreg_val(10))) OR (reg_nreg(10) AND in_nreg_val(10)
));
  rtlcarry_0(10) <= ((rtlcarry_0(9) AND (reg_nreg(9) OR in_nreg_val(9))) OR (reg_nreg(9) AND in_nreg_val(9)
));
  rtlcarry_0(9) <= ((rtlcarry_0(8) AND (reg_nreg(8) OR in_nreg_val(8))) OR (reg_nreg(8) AND in_nreg_val(8)
));
  rtlcarry_0(8) <= ((rtlcarry_0(7) AND (reg_nreg(7) OR in_nreg_val(7))) OR (reg_nreg(7) AND in_nreg_val(7)
));
  rtlcarry_0(7) <= ((in_nreg_val(6) AND (reg_nreg(6) OR rtlcarry_0(6))) OR (reg_nreg(6) AND rtlcarry_0(6)
));
  rtlcarry_0(6) <= ((rtlcarry_0(5) AND (reg_nreg(5) OR in_nreg_val(5))) OR (reg_nreg(5) AND in_nreg_val(5)
));
  rtlcarry_0(5) <= ((in_nreg_val(4) AND (reg_nreg(4) OR rtlcarry_0(4))) OR (reg_nreg(4) AND rtlcarry_0(4)
));
  rtlcarry_0(4) <= ((rtlcarry_0(3) AND (reg_nreg(3) OR in_nreg_val(3))) OR (reg_nreg(3) AND in_nreg_val(3)
));
  rtlcarry_0(3) <= ((rtlcarry_0(2) AND (reg_nreg(2) OR in_nreg_val(2))) OR (reg_nreg(2) AND in_nreg_val(2)
));
  rtlcarry_0(2) <= ((rtlcarry_0(1) AND (reg_nreg(1) OR in_nreg_val(1))) OR (reg_nreg(1) AND in_nreg_val(1)
));
  rtlcarry_0(1) <= (in_nreg_val(0) AND reg_nreg(0));
  aux0 <= (rtlcarry_0(2) XOR in_nreg_val(2));
  aux1 <= NOT((c_nreg AND aux0));
  aux2 <= NOT((rtlcarry_0(3) XOR in_nreg_val(3)));
  aux3 <= NOT((c_nreg AND NOT(aux2)));
  aux4 <= (in_nreg_val(6) XOR rtlcarry_0(6));
  aux5 <= NOT((c_nreg AND aux4));
  aux6 <= NOT((rtlcarry_0(7) XOR in_nreg_val(7)));
  aux7 <= NOT((c_nreg AND NOT(aux6)));
  aux8 <= NOT((rtlcarry_0(8) XOR in_nreg_val(8)));
  aux9 <= NOT((c_nreg AND NOT(aux8)));
  aux10 <= NOT((rtlcarry_0(9) XOR in_nreg_val(9)));
  aux11 <= NOT((c_nreg AND NOT(aux10)));
  aux12 <= NOT((rtlcarry_0(11) XOR in_nreg_val(11)));
  aux13 <= NOT((c_nreg AND NOT(aux12)));
  aux14 <= NOT((c_nreg AND rtlcarry_0(12)));
  aux15 <= NOT((c_nreg AND rtlcarry_0(14)));
  aux16 <= NOT((rtlcarry_0(15) AND c_nreg));
  aux17 <= (c_nreg AND rtlcarry_0(16));
  aux19 <= ((aux17 AND NOT(reset)) AND NOT(reg_nreg(16)));
  aux20 <= NOT((c_nreg AND rtlcarry_0(17)));
  aux21 <= NOT((rtlcarry_0(18) AND c_nreg));
  aux22 <= (c_nreg AND rtlcarry_0(19));
  aux23 <= (aux22 AND reg_nreg(19));
  aux25 <= ((aux23 AND NOT(reset)) AND NOT(reg_nreg(20)));
  aux26 <= NOT((c_nreg AND NOT(reset)));
  aux27 <= (c_nreg OR rtlalc_1(2));
  aux28 <= (NOT(aux26) OR rtlalc_1(3));
  aux29 <= (c_nreg OR rtlalc_1(6));
  aux30 <= (c_nreg OR rtlalc_1(8));
  aux31 <= (c_nreg OR rtlalc_1(9));
  aux32 <= (c_nreg OR rtlalc_1(11));
  aux33 <= (c_nreg OR rtlalc_1(12));
  aux34 <= (c_nreg OR rtlalc_1(14));
  aux35 <= (c_nreg OR rtlalc_1(15));
  aux36 <= (c_nreg OR rtlalc_1(17));
  aux37 <= (c_nreg OR rtlalc_1(18));
  aux38 <= (c_nreg OR rtlalc_1(19));
  aux39 <= (NOT(reset) AND reg_nreg(8));
  aux40 <= (NOT(reset) AND NOT(reg_nreg(8)));
  aux41 <= (NOT(reset) AND reg_nreg(9));
  aux42 <= (NOT(reset) AND NOT(reg_nreg(9)));
  aux43 <= (NOT(reset) AND reg_nreg(11));
  aux44 <= (NOT(reset) AND NOT(reg_nreg(11)));
  aux45 <= (NOT(reset) AND reg_nreg(12));
  aux46 <= (NOT(reset) AND NOT(reg_nreg(12)));
  aux47 <= (NOT(reset) AND reg_nreg(14));
  aux48 <= (NOT(reset) AND NOT(reg_nreg(14)));
  aux49 <= (NOT(reset) AND reg_nreg(16));
  aux50 <= (NOT(reset) AND reg_nreg(17));
  aux51 <= (NOT(reset) AND NOT(reg_nreg(17)));
  aux52 <= (NOT(reset) AND reg_nreg(20));
  aux53 <= (rtlcarry_0(1) XOR in_nreg_val(1));
  aux54 <= (in_nreg_val(4) XOR rtlcarry_0(4));
  aux55 <= (rtlcarry_0(5) XOR in_nreg_val(5));
  aux56 <= (rtlcarry_0(10) XOR in_nreg_val(10));
END RTL;



-- Configuration for sxlib/VITAL library...
library sxlib;
use sxlib.vcomponents.all;

configuration CFG_neuronreg_boom of neuronreg_boom is
  for RTL
  end for;
end CFG_neuronreg_boom;
