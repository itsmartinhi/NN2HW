-- Generated by vxx2ghdl
--
-- Generated by VASY
--
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY neuronreg_boom IS
PORT(
  clk	: IN STD_LOGIC;
  reset	: IN STD_LOGIC;
  c_reset_reg	: IN STD_LOGIC;
  c_nreg	: IN STD_LOGIC;
  in_nreg_val	: IN STD_LOGIC_VECTOR(12 DOWNTO 0);
  out_nreg_val	: OUT STD_LOGIC_VECTOR(20 DOWNTO 0)
);
END neuronreg_boom;

ARCHITECTURE RTL OF neuronreg_boom IS
  SIGNAL rtlalc_1	: STD_LOGIC_VECTOR(20 DOWNTO 0);
  SIGNAL reg_nreg	: STD_LOGIC_VECTOR(20 DOWNTO 0);
  SIGNAL rtlcarry_0	: STD_LOGIC_VECTOR(19 DOWNTO 1);
  SIGNAL aux0	: STD_LOGIC;
  SIGNAL aux1	: STD_LOGIC;
  SIGNAL aux9	: STD_LOGIC;
  SIGNAL aux10	: STD_LOGIC;
  SIGNAL aux11	: STD_LOGIC;
  SIGNAL aux19	: STD_LOGIC;
  SIGNAL aux20	: STD_LOGIC;
  SIGNAL aux21	: STD_LOGIC;
  SIGNAL aux29	: STD_LOGIC;
  SIGNAL aux30	: STD_LOGIC;
  SIGNAL aux38	: STD_LOGIC;
  SIGNAL aux39	: STD_LOGIC;
  SIGNAL aux43	: STD_LOGIC;
  SIGNAL aux44	: STD_LOGIC;
  SIGNAL aux48	: STD_LOGIC;
  SIGNAL aux50	: STD_LOGIC;
  SIGNAL aux55	: STD_LOGIC;
  SIGNAL aux56	: STD_LOGIC;
  SIGNAL aux64	: STD_LOGIC;
  SIGNAL aux69	: STD_LOGIC;
  SIGNAL aux73	: STD_LOGIC;
  SIGNAL aux81	: STD_LOGIC;
  SIGNAL aux85	: STD_LOGIC;
  SIGNAL aux89	: STD_LOGIC;
  SIGNAL aux93	: STD_LOGIC;
  SIGNAL aux97	: STD_LOGIC;
  SIGNAL aux100	: STD_LOGIC;
  SIGNAL aux101	: STD_LOGIC;
  SIGNAL aux103	: STD_LOGIC;
  SIGNAL aux105	: STD_LOGIC;
  SIGNAL aux106	: STD_LOGIC;
BEGIN
  out_nreg_val(20) <= rtlalc_1(20);
  out_nreg_val(19) <= rtlalc_1(19);
  out_nreg_val(18) <= rtlalc_1(18);
  out_nreg_val(17) <= rtlalc_1(17);
  out_nreg_val(16) <= rtlalc_1(16);
  out_nreg_val(15) <= rtlalc_1(15);
  out_nreg_val(14) <= rtlalc_1(14);
  out_nreg_val(13) <= rtlalc_1(13);
  out_nreg_val(12) <= rtlalc_1(12);
  out_nreg_val(11) <= rtlalc_1(11);
  out_nreg_val(10) <= rtlalc_1(10);
  out_nreg_val(9) <= rtlalc_1(9);
  out_nreg_val(8) <= rtlalc_1(8);
  out_nreg_val(7) <= rtlalc_1(7);
  out_nreg_val(6) <= rtlalc_1(6);
  out_nreg_val(5) <= rtlalc_1(5);
  out_nreg_val(4) <= rtlalc_1(4);
  out_nreg_val(3) <= rtlalc_1(3);
  out_nreg_val(2) <= rtlalc_1(2);
  out_nreg_val(1) <= rtlalc_1(1);
  out_nreg_val(0) <= rtlalc_1(0);
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux103 = '1')
    THEN rtlalc_1(20) <= '1';
    ELSIF ((NOT(aux0) AND NOT(aux103)) = '1')
    THEN rtlalc_1(20) <= '0';
    ELSIF ((aux0 AND (c_nreg AND NOT(aux103))) = '1')
    THEN rtlalc_1(20) <= (NOT(rtlcarry_0(19) AND reg_nreg(19)) AND reg_nreg(20));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT((rtlcarry_0(19) OR (reset OR (c_reset_reg OR NOT(aux106))))) OR aux101) =
 '1')
    THEN rtlalc_1(19) <= '1';
    ELSIF ((NOT(aux105) AND ((rtlcarry_0(19) OR (reset OR (c_reset_reg OR NOT(aux106)))) 
AND NOT(aux101))) = '1')
    THEN rtlalc_1(19) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux97 = '1')
    THEN rtlalc_1(18) <= '1';
    ELSIF ((NOT(aux105) AND NOT(aux97)) = '1')
    THEN rtlalc_1(18) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT((rtlcarry_0(17) OR (reset OR (c_reset_reg OR (NOT(c_nreg) OR NOT(reg_nreg(17)
)))))) OR aux93) = '1')
    THEN rtlalc_1(17) <= '1';
    ELSIF ((NOT(aux105) AND ((rtlcarry_0(17) OR (reset OR (c_reset_reg OR (NOT(c_nreg) OR
 NOT(reg_nreg(17)))))) AND NOT(aux93))) = '1')
    THEN rtlalc_1(17) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT((rtlcarry_0(16) OR (reset OR (c_reset_reg OR (NOT(c_nreg) OR NOT(reg_nreg(16)
)))))) OR aux89) = '1')
    THEN rtlalc_1(16) <= '1';
    ELSIF ((NOT(aux105) AND ((rtlcarry_0(16) OR (reset OR (c_reset_reg OR (NOT(c_nreg) OR
 NOT(reg_nreg(16)))))) AND NOT(aux89))) = '1')
    THEN rtlalc_1(16) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT((rtlcarry_0(15) OR (reset OR (c_reset_reg OR (NOT(c_nreg) OR NOT(reg_nreg(15)
)))))) OR aux85) = '1')
    THEN rtlalc_1(15) <= '1';
    ELSIF ((NOT(aux105) AND ((rtlcarry_0(15) OR (reset OR (c_reset_reg OR (NOT(c_nreg) OR
 NOT(reg_nreg(15)))))) AND NOT(aux85))) = '1')
    THEN rtlalc_1(15) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux81 = '1')
    THEN rtlalc_1(14) <= '1';
    ELSIF ((NOT(aux81) AND (c_nreg OR NOT(aux0))) = '1')
    THEN rtlalc_1(14) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux73 = '1')
    THEN rtlalc_1(13) <= '1';
    ELSIF ((NOT(aux73) AND (c_nreg OR NOT(aux0))) = '1')
    THEN rtlalc_1(13) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux69 = '1')
    THEN rtlalc_1(12) <= '1';
    ELSIF ((NOT(aux69) AND (c_nreg OR NOT(aux0))) = '1')
    THEN rtlalc_1(12) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux64 = '1')
    THEN rtlalc_1(11) <= '1';
    ELSIF ((NOT(aux105) AND NOT(aux64)) = '1')
    THEN rtlalc_1(11) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux55 = '1')
    THEN rtlalc_1(10) <= '1';
    ELSIF ((NOT(aux105) AND NOT(aux55)) = '1')
    THEN rtlalc_1(10) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (NOT(aux0) = '1')
    THEN rtlalc_1(9) <= '0';
    ELSIF ((c_nreg AND aux0) = '1')
    THEN rtlalc_1(9) <= aux50;
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (((aux44 AND (NOT(reset) AND (NOT(c_reset_reg) AND (c_nreg AND reg_nreg(8))))) 
OR aux48) = '1')
    THEN rtlalc_1(8) <= '1';
    ELSIF ((NOT(aux105) AND (NOT((aux44 AND (NOT(reset) AND (NOT(c_reset_reg) AND (c_nreg
 AND reg_nreg(8)))))) AND NOT(aux48))) = '1')
    THEN rtlalc_1(8) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (((aux39 AND (NOT(reset) AND (NOT(c_reset_reg) AND (c_nreg AND reg_nreg(7))))) 
OR aux43) = '1')
    THEN rtlalc_1(7) <= '1';
    ELSIF ((NOT(aux105) AND (NOT((aux39 AND (NOT(reset) AND (NOT(c_reset_reg) AND (c_nreg
 AND reg_nreg(7)))))) AND NOT(aux43))) = '1')
    THEN rtlalc_1(7) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux38 = '1')
    THEN rtlalc_1(6) <= '1';
    ELSIF ((NOT(aux38) AND (c_nreg OR NOT(aux0))) = '1')
    THEN rtlalc_1(6) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux29 = '1')
    THEN rtlalc_1(5) <= '1';
    ELSIF ((NOT(aux105) AND NOT(aux29)) = '1')
    THEN rtlalc_1(5) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (NOT(aux0) = '1')
    THEN rtlalc_1(4) <= '0';
    ELSIF ((c_nreg AND aux0) = '1')
    THEN rtlalc_1(4) <= (aux20 XOR in_nreg_val(4));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux19 = '1')
    THEN rtlalc_1(3) <= '1';
    ELSIF ((NOT(aux105) AND NOT(aux19)) = '1')
    THEN rtlalc_1(3) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (NOT(aux0) = '1')
    THEN rtlalc_1(2) <= '0';
    ELSIF ((c_nreg AND aux0) = '1')
    THEN rtlalc_1(2) <= (reg_nreg(2) XOR (rtlcarry_0(2) XOR in_nreg_val(2)));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux9 = '1')
    THEN rtlalc_1(1) <= '1';
    ELSIF ((NOT(aux9) AND (c_nreg OR NOT(aux0))) = '1')
    THEN rtlalc_1(1) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux0 AND ((in_nreg_val(0) XOR reg_nreg(0)) AND c_nreg)) = '1')
    THEN rtlalc_1(0) <= '1';
    ELSIF (((NOT(c_nreg) AND NOT(aux105)) OR ((NOT(in_nreg_val(0) XOR reg_nreg(0)) AND 
NOT(aux105)) OR (NOT(aux0) AND NOT(aux105)))) = '1')
    THEN rtlalc_1(0) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux103 = '1')
    THEN reg_nreg(20) <= '1';
    ELSIF (((NOT(aux0) AND NOT(aux103)) OR (rtlcarry_0(19) AND (aux106 AND NOT(aux103))))
 = '1')
    THEN reg_nreg(20) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux101 = '1')
    THEN reg_nreg(19) <= '1';
    ELSIF (((NOT(aux0) AND NOT(aux101)) OR (rtlcarry_0(19) AND (c_nreg AND NOT(aux101))))
 = '1')
    THEN reg_nreg(19) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux97 = '1')
    THEN reg_nreg(18) <= '1';
    ELSIF ((NOT(aux105) AND NOT(aux97)) = '1')
    THEN reg_nreg(18) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux93 = '1')
    THEN reg_nreg(17) <= '1';
    ELSIF (((NOT(aux0) AND NOT(aux93)) OR (rtlcarry_0(17) AND (c_nreg AND NOT(aux93)))) =
 '1')
    THEN reg_nreg(17) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux89 = '1')
    THEN reg_nreg(16) <= '1';
    ELSIF (((NOT(aux0) AND NOT(aux89)) OR (rtlcarry_0(16) AND (c_nreg AND NOT(aux89)))) =
 '1')
    THEN reg_nreg(16) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux85 = '1')
    THEN reg_nreg(15) <= '1';
    ELSIF (((NOT(aux0) AND NOT(aux85)) OR (rtlcarry_0(15) AND (c_nreg AND NOT(aux85)))) =
 '1')
    THEN reg_nreg(15) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux81 = '1')
    THEN reg_nreg(14) <= '1';
    ELSIF ((NOT(aux81) AND (c_nreg OR NOT(aux0))) = '1')
    THEN reg_nreg(14) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux73 = '1')
    THEN reg_nreg(13) <= '1';
    ELSIF ((NOT(aux105) AND NOT(aux73)) = '1')
    THEN reg_nreg(13) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux69 = '1')
    THEN reg_nreg(12) <= '1';
    ELSIF ((NOT(aux105) AND NOT(aux69)) = '1')
    THEN reg_nreg(12) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux64 = '1')
    THEN reg_nreg(11) <= '1';
    ELSIF ((NOT(aux64) AND (c_nreg OR NOT(aux0))) = '1')
    THEN reg_nreg(11) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux55 = '1')
    THEN reg_nreg(10) <= '1';
    ELSIF ((NOT(aux105) AND NOT(aux55)) = '1')
    THEN reg_nreg(10) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux50 AND (NOT(reset) AND (NOT(c_reset_reg) AND c_nreg))) = '1')
    THEN reg_nreg(9) <= '1';
    ELSIF ((NOT((aux50 AND (NOT(reset) AND (NOT(c_reset_reg) AND c_nreg)))) AND NOT(aux105
)) = '1')
    THEN reg_nreg(9) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux48 = '1')
    THEN reg_nreg(8) <= '1';
    ELSIF (((NOT(aux0) AND NOT(aux48)) OR (NOT(aux44 OR NOT(c_nreg)) AND NOT(aux48))) = '1'
)
    THEN reg_nreg(8) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux43 = '1')
    THEN reg_nreg(7) <= '1';
    ELSIF (((NOT(aux0) AND NOT(aux43)) OR (NOT(aux39 OR NOT(c_nreg)) AND NOT(aux43))) = '1'
)
    THEN reg_nreg(7) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux38 = '1')
    THEN reg_nreg(6) <= '1';
    ELSIF ((NOT(aux38) AND (c_nreg OR NOT(aux0))) = '1')
    THEN reg_nreg(6) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux29 = '1')
    THEN reg_nreg(5) <= '1';
    ELSIF ((NOT(aux29) AND (c_nreg OR NOT(aux0))) = '1')
    THEN reg_nreg(5) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT(c_nreg) AND NOT(aux0)) = '1')
    THEN reg_nreg(4) <= '0';
    ELSIF (c_nreg = '1')
    THEN reg_nreg(4) <= (NOT(reset) AND (NOT(c_reset_reg) AND (aux20 XOR in_nreg_val(4))));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux19 = '1')
    THEN reg_nreg(3) <= '1';
    ELSIF ((NOT(aux19) AND (c_nreg OR NOT(aux0))) = '1')
    THEN reg_nreg(3) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT(reset) AND (NOT(c_reset_reg) AND (NOT(in_nreg_val(2) XOR aux10) AND c_nreg
))) = '1')
    THEN reg_nreg(2) <= '1';
    ELSIF (((NOT(c_nreg) AND NOT(aux105)) OR (((in_nreg_val(2) XOR aux10) AND NOT(aux105)
) OR ((reset OR c_reset_reg) AND NOT(aux105)))) = '1')
    THEN reg_nreg(2) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux9 = '1')
    THEN reg_nreg(1) <= '1';
    ELSIF ((NOT(aux9) AND (c_nreg OR NOT(aux0))) = '1')
    THEN reg_nreg(1) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (NOT(aux0) = '1')
    THEN reg_nreg(0) <= '0';
    ELSIF ((aux0 AND (in_nreg_val(0) AND c_nreg)) = '1')
    THEN reg_nreg(0) <= NOT(reg_nreg(0));
    END IF;
    END IF;
  END PROCESS;
  rtlcarry_0(19) <= (rtlcarry_0(18) AND reg_nreg(18));
  rtlcarry_0(18) <= (rtlcarry_0(17) AND reg_nreg(17));
  rtlcarry_0(17) <= (rtlcarry_0(16) AND reg_nreg(16));
  rtlcarry_0(16) <= (rtlcarry_0(15) AND reg_nreg(15));
  rtlcarry_0(15) <= (rtlcarry_0(14) AND reg_nreg(14));
  rtlcarry_0(14) <= (rtlcarry_0(13) AND reg_nreg(13));
  rtlcarry_0(13) <= ((rtlcarry_0(12) AND (in_nreg_val(12) OR reg_nreg(12))) OR (in_nreg_val(12) AND
 reg_nreg(12)));
  rtlcarry_0(12) <= ((rtlcarry_0(11) AND (reg_nreg(11) OR in_nreg_val(11))) OR (reg_nreg(11) AND in_nreg_val(11)
));
  rtlcarry_0(11) <= ((rtlcarry_0(10) AND (reg_nreg(10) OR in_nreg_val(10))) OR (reg_nreg(10) AND in_nreg_val(10)
));
  rtlcarry_0(10) <= ((rtlcarry_0(9) AND (reg_nreg(9) OR in_nreg_val(9))) OR (reg_nreg(9) AND in_nreg_val(9)
));
  rtlcarry_0(9) <= ((in_nreg_val(8) AND (reg_nreg(8) OR rtlcarry_0(8))) OR (reg_nreg(8) AND rtlcarry_0(8)
));
  rtlcarry_0(8) <= ((rtlcarry_0(7) AND (reg_nreg(7) OR in_nreg_val(7))) OR (reg_nreg(7) AND in_nreg_val(7)
));
  rtlcarry_0(7) <= ((rtlcarry_0(6) AND (reg_nreg(6) OR in_nreg_val(6))) OR (reg_nreg(6) AND in_nreg_val(6)
));
  rtlcarry_0(6) <= ((in_nreg_val(5) AND (reg_nreg(5) OR rtlcarry_0(5))) OR (reg_nreg(5) AND rtlcarry_0(5)
));
  rtlcarry_0(5) <= ((in_nreg_val(4) AND (reg_nreg(4) OR rtlcarry_0(4))) OR (reg_nreg(4) AND rtlcarry_0(4)
));
  rtlcarry_0(4) <= ((rtlcarry_0(3) AND (reg_nreg(3) OR in_nreg_val(3))) OR (reg_nreg(3) AND in_nreg_val(3)
));
  rtlcarry_0(3) <= ((rtlcarry_0(2) AND (in_nreg_val(2) OR reg_nreg(2))) OR (in_nreg_val(2) AND reg_nreg(2)
));
  rtlcarry_0(2) <= ((in_nreg_val(1) AND (reg_nreg(1) OR rtlcarry_0(1))) OR (reg_nreg(1) AND rtlcarry_0(1)
));
  rtlcarry_0(1) <= (reg_nreg(0) AND in_nreg_val(0));
  aux0 <= (NOT(reset) AND NOT(c_reset_reg));
  aux1 <= NOT((in_nreg_val(1) XOR rtlcarry_0(1)));
  aux9 <= (((((aux1 AND NOT(reset)) AND NOT(c_reset_reg)) AND reg_nreg(1)) OR (((NOT(aux1
) AND NOT(reset)) AND NOT(c_reset_reg)) AND NOT(reg_nreg(1)))) AND c_nreg);
  aux10 <= NOT((rtlcarry_0(2) XOR reg_nreg(2)));
  aux11 <= NOT((rtlcarry_0(3) XOR in_nreg_val(3)));
  aux19 <= (((((aux11 AND NOT(reset)) AND NOT(c_reset_reg)) AND reg_nreg(3)) OR (((NOT(aux11
) AND NOT(reset)) AND NOT(c_reset_reg)) AND NOT(reg_nreg(3)))) AND c_nreg);
  aux20 <= (rtlcarry_0(4) XOR reg_nreg(4));
  aux21 <= NOT((in_nreg_val(5) XOR rtlcarry_0(5)));
  aux29 <= (((((aux21 AND NOT(reset)) AND NOT(c_reset_reg)) AND reg_nreg(5)) OR (((NOT(aux21
) AND NOT(reset)) AND NOT(c_reset_reg)) AND NOT(reg_nreg(5)))) AND c_nreg);
  aux30 <= NOT((rtlcarry_0(6) XOR in_nreg_val(6)));
  aux38 <= (((((aux30 AND NOT(reset)) AND NOT(c_reset_reg)) AND reg_nreg(6)) OR (((NOT(aux30
) AND NOT(reset)) AND NOT(c_reset_reg)) AND NOT(reg_nreg(6)))) AND c_nreg);
  aux39 <= NOT((rtlcarry_0(7) XOR in_nreg_val(7)));
  aux43 <= ((((NOT(aux39) AND NOT(reset)) AND NOT(c_reset_reg)) AND c_nreg) AND NOT(reg_nreg(7)
));
  aux44 <= NOT((in_nreg_val(8) XOR rtlcarry_0(8)));
  aux48 <= ((((NOT(aux44) AND NOT(reset)) AND NOT(c_reset_reg)) AND c_nreg) AND NOT(reg_nreg(8)
));
  aux50 <= (rtlcarry_0(9) XOR (in_nreg_val(9) XOR reg_nreg(9)));
  aux55 <= ((((rtlcarry_0(10) XOR (in_nreg_val(10) XOR reg_nreg(10))) AND NOT(reset)) AND 
NOT(c_reset_reg)) AND c_nreg);
  aux56 <= NOT((rtlcarry_0(11) XOR in_nreg_val(11)));
  aux64 <= (((((aux56 AND NOT(reset)) AND NOT(c_reset_reg)) AND reg_nreg(11)) OR (((NOT(aux56
) AND NOT(reset)) AND NOT(c_reset_reg)) AND NOT(reg_nreg(11)))) AND c_nreg);
  aux69 <= ((((rtlcarry_0(12) XOR (reg_nreg(12) XOR in_nreg_val(12))) AND NOT(reset)) AND 
NOT(c_reset_reg)) AND c_nreg);
  aux73 <= ((((rtlcarry_0(13) XOR reg_nreg(13)) AND NOT(reset)) AND NOT(c_reset_reg)) AND c_nreg
);
  aux81 <= (((((NOT(rtlcarry_0(14)) AND NOT(reset)) AND NOT(c_reset_reg)) AND reg_nreg(14)
) OR (((rtlcarry_0(14) AND NOT(reset)) AND NOT(c_reset_reg)) AND NOT(reg_nreg(14)
))) AND c_nreg);
  aux85 <= ((((rtlcarry_0(15) AND NOT(reset)) AND NOT(c_reset_reg)) AND c_nreg) AND NOT(reg_nreg(15)
));
  aux89 <= ((((rtlcarry_0(16) AND NOT(reset)) AND NOT(c_reset_reg)) AND c_nreg) AND NOT(reg_nreg(16)
));
  aux93 <= ((((rtlcarry_0(17) AND NOT(reset)) AND NOT(c_reset_reg)) AND c_nreg) AND NOT(reg_nreg(17)
));
  aux97 <= ((((rtlcarry_0(18) XOR reg_nreg(18)) AND NOT(reset)) AND NOT(c_reset_reg)) AND c_nreg
);
  aux100 <= (((rtlcarry_0(19) AND NOT(reset)) AND NOT(c_reset_reg)) AND c_nreg);
  aux101 <= (aux100 AND NOT(reg_nreg(19)));
  aux103 <= ((aux100 AND reg_nreg(19)) AND NOT(reg_nreg(20)));
  aux105 <= (NOT(reset) AND (NOT(c_reset_reg) AND NOT(c_nreg)));
  aux106 <= NOT((NOT(c_nreg) OR NOT(reg_nreg(19))));
END RTL;



-- Configuration for sxlib/VITAL library...
library sxlib;
use sxlib.vcomponents.all;

configuration CFG_neuronreg_boom of neuronreg_boom is
  for RTL
  end for;
end CFG_neuronreg_boom;
