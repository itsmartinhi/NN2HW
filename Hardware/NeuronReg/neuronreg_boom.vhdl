-- Generated by vxx2ghdl
--
-- Generated by VASY
--
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY neuronreg_boom IS
PORT(
  clk	: IN STD_LOGIC;
  reset	: IN STD_LOGIC;
  c_reset_reg	: IN STD_LOGIC;
  c_nreg	: IN STD_LOGIC;
  in_nreg_val	: IN STD_LOGIC_VECTOR(12 DOWNTO 0);
  out_nreg_val	: OUT STD_LOGIC_VECTOR(20 DOWNTO 0)
);
END neuronreg_boom;

ARCHITECTURE RTL OF neuronreg_boom IS
  SIGNAL rtl_std_logic_vector_1	: STD_LOGIC_VECTOR(1 DOWNTO 0);
  SIGNAL rtl_std_logic_vector_0	: STD_LOGIC_VECTOR(1 DOWNTO 0);
  SIGNAL rtlalc_1	: STD_LOGIC_VECTOR(20 DOWNTO 0);
  SIGNAL reg_nreg	: STD_LOGIC_VECTOR(20 DOWNTO 0);
  SIGNAL rtlcarry_0	: STD_LOGIC_VECTOR(19 DOWNTO 1);
  SIGNAL aux0	: STD_LOGIC;
  SIGNAL aux1	: STD_LOGIC;
  SIGNAL aux2	: STD_LOGIC;
  SIGNAL aux3	: STD_LOGIC;
  SIGNAL aux4	: STD_LOGIC;
  SIGNAL aux5	: STD_LOGIC;
  SIGNAL aux6	: STD_LOGIC;
  SIGNAL aux7	: STD_LOGIC;
  SIGNAL aux9	: STD_LOGIC;
  SIGNAL aux10	: STD_LOGIC;
  SIGNAL aux11	: STD_LOGIC;
  SIGNAL aux12	: STD_LOGIC;
  SIGNAL aux13	: STD_LOGIC;
  SIGNAL aux17	: STD_LOGIC;
  SIGNAL aux21	: STD_LOGIC;
  SIGNAL aux24	: STD_LOGIC;
  SIGNAL aux26	: STD_LOGIC;
  SIGNAL aux27	: STD_LOGIC;
  SIGNAL aux28	: STD_LOGIC;
  SIGNAL aux29	: STD_LOGIC;
  SIGNAL aux30	: STD_LOGIC;
  SIGNAL aux31	: STD_LOGIC;
  SIGNAL aux32	: STD_LOGIC;
  SIGNAL aux33	: STD_LOGIC;
  SIGNAL aux34	: STD_LOGIC;
  SIGNAL aux35	: STD_LOGIC;
  SIGNAL aux36	: STD_LOGIC;
  SIGNAL aux37	: STD_LOGIC;
  SIGNAL aux38	: STD_LOGIC;
  SIGNAL aux41	: STD_LOGIC;
  SIGNAL aux42	: STD_LOGIC;
  SIGNAL aux43	: STD_LOGIC;
  SIGNAL aux44	: STD_LOGIC;
  SIGNAL aux45	: STD_LOGIC;
BEGIN
  rtl_std_logic_vector_1 <= (NOT(reg_nreg(1) XOR aux2) & (reg_nreg(0) XOR in_nreg_val(0)));
  rtl_std_logic_vector_0 <= ((reg_nreg(14) XOR rtlcarry_0(14)) & (reg_nreg(13) XOR rtlcarry_0(13)));
  out_nreg_val(20) <= rtlalc_1(20);
  out_nreg_val(19) <= rtlalc_1(19);
  out_nreg_val(18) <= rtlalc_1(18);
  out_nreg_val(17) <= rtlalc_1(17);
  out_nreg_val(16) <= rtlalc_1(16);
  out_nreg_val(15) <= rtlalc_1(15);
  out_nreg_val(14) <= rtlalc_1(14);
  out_nreg_val(13) <= rtlalc_1(13);
  out_nreg_val(12) <= rtlalc_1(12);
  out_nreg_val(11) <= rtlalc_1(11);
  out_nreg_val(10) <= rtlalc_1(10);
  out_nreg_val(9) <= rtlalc_1(9);
  out_nreg_val(8) <= rtlalc_1(8);
  out_nreg_val(7) <= rtlalc_1(7);
  out_nreg_val(6) <= rtlalc_1(6);
  out_nreg_val(5) <= rtlalc_1(5);
  out_nreg_val(4) <= rtlalc_1(4);
  out_nreg_val(3) <= rtlalc_1(3);
  out_nreg_val(2) <= rtlalc_1(2);
  out_nreg_val(1) <= rtlalc_1(1);
  out_nreg_val(0) <= rtlalc_1(0);
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux26 = '1')
    THEN rtlalc_1(20) <= '1';
    ELSIF ((NOT(aux1) AND NOT(aux26)) = '1')
    THEN rtlalc_1(20) <= (NOT(rtlcarry_0(19) AND reg_nreg(19)) AND reg_nreg(20));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux37 AND (reg_nreg(19) XOR rtlcarry_0(19))) = '1')
    THEN rtlalc_1(19) <= '1';
    ELSIF ((NOT(aux1) AND (NOT(aux37) OR NOT(reg_nreg(19) XOR rtlcarry_0(19)))) = '1')
    THEN rtlalc_1(19) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux36 AND ((rtlcarry_0(18) AND aux44) OR (NOT(rtlcarry_0(18)) AND (c_nreg AND
 reg_nreg(18))))) = '1')
    THEN rtlalc_1(18) <= '1';
    ELSIF ((NOT(aux1) AND (NOT(aux36) OR ((rtlcarry_0(18) AND NOT(aux44)) OR (NOT(rtlcarry_0(18)
) AND (NOT(c_nreg) OR NOT(reg_nreg(18))))))) = '1')
    THEN rtlalc_1(18) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux35 AND ((rtlcarry_0(17) AND aux43) OR (NOT(rtlcarry_0(17)) AND (c_nreg AND
 reg_nreg(17))))) = '1')
    THEN rtlalc_1(17) <= '1';
    ELSIF ((NOT(aux1) AND (NOT(aux35) OR ((rtlcarry_0(17) AND NOT(aux43)) OR (NOT(rtlcarry_0(17)
) AND (NOT(c_nreg) OR NOT(reg_nreg(17))))))) = '1')
    THEN rtlalc_1(17) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (NOT(aux1) = '1')
    THEN rtlalc_1(16) <= (reg_nreg(16) XOR rtlcarry_0(16));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT((rtlcarry_0(15) OR (c_reset_reg OR (reset OR (NOT(c_nreg) OR NOT(reg_nreg(15)
)))))) OR aux21) = '1')
    THEN rtlalc_1(15) <= '1';
    ELSIF ((NOT(aux1) AND ((rtlcarry_0(15) OR (c_reset_reg OR (reset OR (NOT(c_nreg) OR 
NOT(reg_nreg(15)))))) AND NOT(aux21))) = '1')
    THEN rtlalc_1(15) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (NOT(aux1) = '1')
    THEN rtlalc_1(14 downto 13) <= rtl_std_logic_vector_0;
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (((aux13 AND (NOT(c_reset_reg) AND (NOT(reset) AND (c_nreg AND reg_nreg(12)))))
 OR aux17) = '1')
    THEN rtlalc_1(12) <= '1';
    ELSIF ((NOT(aux1) AND (NOT((aux13 AND (NOT(c_reset_reg) AND (NOT(reset) AND (c_nreg 
AND reg_nreg(12)))))) AND NOT(aux17))) = '1')
    THEN rtlalc_1(12) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (NOT(aux1) = '1')
    THEN rtlalc_1(11) <= NOT(reg_nreg(11) XOR aux12);
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux34 AND NOT(reg_nreg(10) XOR aux11)) = '1')
    THEN rtlalc_1(10) <= '1';
    ELSIF ((NOT(aux1) AND (NOT(aux34) OR (reg_nreg(10) XOR aux11))) = '1')
    THEN rtlalc_1(10) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (NOT(aux1) = '1')
    THEN rtlalc_1(9) <= NOT(reg_nreg(9) XOR aux10);
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux0 AND ((aux9 OR (c_reset_reg OR reset)) AND c_nreg)) = '1')
    THEN rtlalc_1(8) <= '1';
    ELSIF ((NOT(aux9) AND (NOT(c_reset_reg) AND (NOT(reset) AND c_nreg))) = '1')
    THEN rtlalc_1(8) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux33 AND ((aux7 AND (c_nreg AND reg_nreg(7))) OR (NOT(aux7) AND aux42))) = '1'
)
    THEN rtlalc_1(7) <= '1';
    ELSIF ((NOT(aux1) AND (NOT(aux33) OR ((aux7 AND (NOT(c_nreg) OR NOT(reg_nreg(7)))) OR
 (NOT(aux7) AND NOT(aux42))))) = '1')
    THEN rtlalc_1(7) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux32 AND (NOT(in_nreg_val(6) XOR aux31) AND c_nreg)) = '1')
    THEN rtlalc_1(6) <= '1';
    ELSIF ((aux0 AND (((in_nreg_val(6) XOR aux31) AND c_nreg) OR (NOT(aux32) AND c_nreg))
) = '1')
    THEN rtlalc_1(6) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux30 AND (c_nreg AND (aux29 XOR rtlcarry_0(5)))) = '1')
    THEN rtlalc_1(5) <= '1';
    ELSIF ((NOT(aux1) AND (NOT(aux30) OR (NOT(c_nreg) OR NOT(aux29 XOR rtlcarry_0(5))))) 
= '1')
    THEN rtlalc_1(5) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (NOT(aux1) = '1')
    THEN rtlalc_1(4) <= NOT(reg_nreg(4) XOR aux5);
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux28 AND NOT(reg_nreg(3) XOR aux4)) = '1')
    THEN rtlalc_1(3) <= '1';
    ELSIF ((NOT(aux1) AND (NOT(aux28) OR (reg_nreg(3) XOR aux4))) = '1')
    THEN rtlalc_1(3) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux27 AND NOT(reg_nreg(2) XOR aux3)) = '1')
    THEN rtlalc_1(2) <= '1';
    ELSIF ((NOT(aux1) AND (NOT(aux27) OR (reg_nreg(2) XOR aux3))) = '1')
    THEN rtlalc_1(2) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (NOT(aux1) = '1')
    THEN rtlalc_1(1 downto 0) <= rtl_std_logic_vector_1;
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux26 = '1')
    THEN reg_nreg(20) <= '1';
    ELSIF (((NOT(aux0) AND NOT(aux26)) OR (NOT(aux45 OR NOT(reg_nreg(19))) AND NOT(aux26)
)) = '1')
    THEN reg_nreg(20) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux45 AND (aux0 AND aux24)) = '1')
    THEN reg_nreg(19) <= '1';
    ELSIF ((NOT(aux45 AND aux0) AND NOT(aux24)) = '1')
    THEN reg_nreg(19) <= '0';
    ELSIF ((NOT(aux45 AND aux0) AND aux24) = '1')
    THEN reg_nreg(19) <= NOT(reg_nreg(19));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((rtlcarry_0(18) AND (NOT(c_reset_reg) AND (NOT(reset) AND aux44))) = '1')
    THEN reg_nreg(18) <= '1';
    ELSIF (((rtlcarry_0(18) AND ((c_nreg OR NOT(aux0)) AND (c_reset_reg OR (reset OR NOT(aux44
))))) OR (NOT(rtlcarry_0(18)) AND NOT(aux0))) = '1')
    THEN reg_nreg(18) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((rtlcarry_0(17) AND (NOT(c_reset_reg) AND (NOT(reset) AND aux43))) = '1')
    THEN reg_nreg(17) <= '1';
    ELSIF (((rtlcarry_0(17) AND ((c_nreg OR NOT(aux0)) AND (c_reset_reg OR (reset OR NOT(aux43
))))) OR (NOT(rtlcarry_0(17)) AND NOT(aux0))) = '1')
    THEN reg_nreg(17) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT(rtlcarry_0(16) AND c_nreg) AND NOT(aux0)) = '1')
    THEN reg_nreg(16) <= '0';
    ELSIF ((rtlcarry_0(16) AND c_nreg) = '1')
    THEN reg_nreg(16) <= (NOT(reg_nreg(16)) AND (NOT(c_reset_reg) AND NOT(reset)));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux21 = '1')
    THEN reg_nreg(15) <= '1';
    ELSIF (((NOT(aux0) AND NOT(aux21)) OR (rtlcarry_0(15) AND (c_nreg AND NOT(aux21)))) =
 '1')
    THEN reg_nreg(15) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT(rtlcarry_0(14) AND c_nreg) AND NOT(aux0)) = '1')
    THEN reg_nreg(14) <= '0';
    ELSIF ((rtlcarry_0(14) AND c_nreg) = '1')
    THEN reg_nreg(14) <= (NOT(reg_nreg(14)) AND (NOT(c_reset_reg) AND NOT(reset)));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT(rtlcarry_0(13) AND c_nreg) AND NOT(aux0)) = '1')
    THEN reg_nreg(13) <= '0';
    ELSIF ((rtlcarry_0(13) AND c_nreg) = '1')
    THEN reg_nreg(13) <= (NOT(reg_nreg(13)) AND (NOT(c_reset_reg) AND NOT(reset)));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (aux17 = '1')
    THEN reg_nreg(12) <= '1';
    ELSIF (((NOT(aux0) AND NOT(aux17)) OR (NOT(aux13 OR NOT(c_nreg)) AND NOT(aux17))) = '1'
)
    THEN reg_nreg(12) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((c_nreg AND (aux12 AND (aux0 AND (NOT(c_reset_reg) AND (NOT(reset) AND (in_nreg_val(11)
 XOR rtlcarry_0(11))))))) = '1')
    THEN reg_nreg(11) <= '1';
    ELSIF (((c_nreg AND (NOT(aux12 AND aux0) AND (c_reset_reg OR (reset OR NOT(in_nreg_val(11)
 XOR rtlcarry_0(11)))))) OR (NOT(c_nreg) AND NOT(aux0))) = '1')
    THEN reg_nreg(11) <= '0';
    ELSIF ((c_nreg AND (NOT(aux12 AND aux0) AND (NOT(c_reset_reg) AND (NOT(reset) AND (in_nreg_val(11)
 XOR rtlcarry_0(11)))))) = '1')
    THEN reg_nreg(11) <= NOT(reg_nreg(11));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((c_nreg AND (aux11 AND (aux0 AND (NOT(c_reset_reg) AND (NOT(reset) AND (in_nreg_val(10)
 XOR rtlcarry_0(10))))))) = '1')
    THEN reg_nreg(10) <= '1';
    ELSIF (((c_nreg AND (NOT(aux11 AND aux0) AND (c_reset_reg OR (reset OR NOT(in_nreg_val(10)
 XOR rtlcarry_0(10)))))) OR (NOT(c_nreg) AND NOT(aux0))) = '1')
    THEN reg_nreg(10) <= '0';
    ELSIF ((c_nreg AND (NOT(aux11 AND aux0) AND (NOT(c_reset_reg) AND (NOT(reset) AND (in_nreg_val(10)
 XOR rtlcarry_0(10)))))) = '1')
    THEN reg_nreg(10) <= NOT(reg_nreg(10));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (((aux10 OR NOT(c_nreg)) AND NOT(aux0)) = '1')
    THEN reg_nreg(9) <= '0';
    ELSIF ((NOT(aux10) AND c_nreg) = '1')
    THEN reg_nreg(9) <= (NOT(reg_nreg(9)) AND (NOT(c_reset_reg) AND NOT(reset)));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((c_reset_reg OR reset) = '1')
    THEN reg_nreg(8) <= '0';
    ELSIF ((NOT(c_reset_reg) AND (NOT(reset) AND c_nreg)) = '1')
    THEN reg_nreg(8) <= aux9;
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT(aux7) AND (NOT(c_reset_reg) AND (NOT(reset) AND aux42))) = '1')
    THEN reg_nreg(7) <= '1';
    ELSIF (((aux7 AND NOT(aux0)) OR (NOT(aux7) AND ((c_nreg OR NOT(aux0)) AND (c_reset_reg
 OR (reset OR NOT(aux42)))))) = '1')
    THEN reg_nreg(7) <= '0';
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((NOT(c_nreg) AND NOT(aux0)) = '1')
    THEN reg_nreg(6) <= '0';
    ELSIF (c_nreg = '1')
    THEN reg_nreg(6) <= (NOT(c_reset_reg) AND (NOT(reset) AND (aux6 XOR rtlcarry_0(6))));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN reg_nreg(5) <= (((((rtlcarry_0(5) OR NOT(c_nreg)) AND aux38) OR (NOT(rtlcarry_0(5)) AND aux41)
) AND in_nreg_val(5)) OR ((((NOT(rtlcarry_0(5)) OR NOT(c_nreg)) AND aux38) OR (rtlcarry_0(5)
 AND aux41)) AND NOT(in_nreg_val(5))));
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((c_nreg AND (aux5 AND (aux0 AND (NOT(c_reset_reg) AND (NOT(reset) AND (in_nreg_val(4)
 XOR rtlcarry_0(4))))))) = '1')
    THEN reg_nreg(4) <= '1';
    ELSIF (((c_nreg AND (NOT(aux5 AND aux0) AND (c_reset_reg OR (reset OR NOT(in_nreg_val(4)
 XOR rtlcarry_0(4)))))) OR (NOT(c_nreg) AND NOT(aux0))) = '1')
    THEN reg_nreg(4) <= '0';
    ELSIF ((c_nreg AND (NOT(aux5 AND aux0) AND (NOT(c_reset_reg) AND (NOT(reset) AND (in_nreg_val(4)
 XOR rtlcarry_0(4)))))) = '1')
    THEN reg_nreg(4) <= NOT(reg_nreg(4));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (((aux4 OR NOT(c_nreg)) AND NOT(aux0)) = '1')
    THEN reg_nreg(3) <= '0';
    ELSIF ((NOT(aux4) AND c_nreg) = '1')
    THEN reg_nreg(3) <= (NOT(reg_nreg(3)) AND (NOT(c_reset_reg) AND NOT(reset)));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (((aux3 OR NOT(c_nreg)) AND NOT(aux0)) = '1')
    THEN reg_nreg(2) <= '0';
    ELSIF ((NOT(aux3) AND c_nreg) = '1')
    THEN reg_nreg(2) <= (NOT(reg_nreg(2)) AND (NOT(c_reset_reg) AND NOT(reset)));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF (NOT(aux0) = '1')
    THEN reg_nreg(1) <= '0';
    ELSIF ((NOT(aux2) AND (c_nreg AND aux0)) = '1')
    THEN reg_nreg(1) <= NOT(reg_nreg(1));
    END IF;
    END IF;
  END PROCESS;
  PROCESS ( clk )
  BEGIN
    IF  ((clk = '1') AND clk'EVENT)
    THEN 
    IF ((aux0 AND (in_nreg_val(0) AND (NOT(c_nreg) AND NOT(aux1)))) = '1')
    THEN reg_nreg(0) <= '1';
    ELSIF (((in_nreg_val(0) AND (c_nreg AND aux1)) OR (NOT(aux0) AND (NOT(in_nreg_val(0))
 OR aux1))) = '1')
    THEN reg_nreg(0) <= '0';
    ELSIF (((in_nreg_val(0) AND (c_nreg AND NOT(aux1))) OR (NOT(aux0) AND (in_nreg_val(0)
 AND NOT(aux1)))) = '1')
    THEN reg_nreg(0) <= NOT(reg_nreg(0));
    END IF;
    END IF;
  END PROCESS;
  rtlcarry_0(19) <= (rtlcarry_0(18) AND reg_nreg(18));
  rtlcarry_0(18) <= (rtlcarry_0(17) AND reg_nreg(17));
  rtlcarry_0(17) <= (rtlcarry_0(16) AND reg_nreg(16));
  rtlcarry_0(16) <= (rtlcarry_0(15) AND reg_nreg(15));
  rtlcarry_0(15) <= (rtlcarry_0(14) AND reg_nreg(14));
  rtlcarry_0(14) <= (rtlcarry_0(13) AND reg_nreg(13));
  rtlcarry_0(13) <= ((rtlcarry_0(12) AND (reg_nreg(12) OR in_nreg_val(12))) OR (reg_nreg(12) AND in_nreg_val(12)
));
  rtlcarry_0(12) <= ((rtlcarry_0(11) AND (reg_nreg(11) OR in_nreg_val(11))) OR (reg_nreg(11) AND in_nreg_val(11)
));
  rtlcarry_0(11) <= ((rtlcarry_0(10) AND (reg_nreg(10) OR in_nreg_val(10))) OR (reg_nreg(10) AND in_nreg_val(10)
));
  rtlcarry_0(10) <= ((in_nreg_val(9) AND (reg_nreg(9) OR rtlcarry_0(9))) OR (reg_nreg(9) AND rtlcarry_0(9)
));
  rtlcarry_0(9) <= ((rtlcarry_0(8) AND (reg_nreg(8) OR in_nreg_val(8))) OR (reg_nreg(8) AND in_nreg_val(8)
));
  rtlcarry_0(8) <= ((in_nreg_val(7) AND (reg_nreg(7) OR rtlcarry_0(7))) OR (reg_nreg(7) AND rtlcarry_0(7)
));
  rtlcarry_0(7) <= ((rtlcarry_0(6) AND (in_nreg_val(6) OR reg_nreg(6))) OR (in_nreg_val(6) AND reg_nreg(6)
));
  rtlcarry_0(6) <= ((rtlcarry_0(5) AND (in_nreg_val(5) OR reg_nreg(5))) OR (in_nreg_val(5) AND reg_nreg(5)
));
  rtlcarry_0(5) <= ((rtlcarry_0(4) AND (reg_nreg(4) OR in_nreg_val(4))) OR (reg_nreg(4) AND in_nreg_val(4)
));
  rtlcarry_0(4) <= ((rtlcarry_0(3) AND (reg_nreg(3) OR in_nreg_val(3))) OR (reg_nreg(3) AND in_nreg_val(3)
));
  rtlcarry_0(3) <= ((in_nreg_val(2) AND (reg_nreg(2) OR rtlcarry_0(2))) OR (reg_nreg(2) AND rtlcarry_0(2)
));
  rtlcarry_0(2) <= ((rtlcarry_0(1) AND (reg_nreg(1) OR in_nreg_val(1))) OR (reg_nreg(1) AND in_nreg_val(1)
));
  rtlcarry_0(1) <= (in_nreg_val(0) AND reg_nreg(0));
  aux0 <= (NOT(c_reset_reg) AND NOT(reset));
  aux1 <= NOT((aux0 AND c_nreg));
  aux2 <= NOT((rtlcarry_0(1) XOR in_nreg_val(1)));
  aux3 <= NOT((in_nreg_val(2) XOR rtlcarry_0(2)));
  aux4 <= NOT((rtlcarry_0(3) XOR in_nreg_val(3)));
  aux5 <= NOT((rtlcarry_0(4) XOR in_nreg_val(4)));
  aux6 <= (reg_nreg(6) XOR in_nreg_val(6));
  aux7 <= NOT((in_nreg_val(7) XOR rtlcarry_0(7)));
  aux9 <= (rtlcarry_0(8) XOR (in_nreg_val(8) XOR reg_nreg(8)));
  aux10 <= NOT((in_nreg_val(9) XOR rtlcarry_0(9)));
  aux11 <= NOT((rtlcarry_0(10) XOR in_nreg_val(10)));
  aux12 <= NOT((rtlcarry_0(11) XOR in_nreg_val(11)));
  aux13 <= NOT((rtlcarry_0(12) XOR in_nreg_val(12)));
  aux17 <= ((((NOT(aux13) AND NOT(c_reset_reg)) AND NOT(reset)) AND c_nreg) AND NOT(reg_nreg(12)
));
  aux21 <= ((((rtlcarry_0(15) AND NOT(c_reset_reg)) AND NOT(reset)) AND c_nreg) AND NOT(reg_nreg(15)
));
  aux24 <= (((rtlcarry_0(19) AND NOT(c_reset_reg)) AND NOT(reset)) AND c_nreg);
  aux26 <= ((aux24 AND reg_nreg(19)) AND NOT(reg_nreg(20)));
  aux27 <= (NOT(aux1) OR rtlalc_1(2));
  aux28 <= (NOT(aux1) OR rtlalc_1(3));
  aux29 <= (reg_nreg(5) XOR in_nreg_val(5));
  aux30 <= (aux0 OR rtlalc_1(5));
  aux31 <= NOT((rtlcarry_0(6) XOR reg_nreg(6)));
  aux32 <= (aux0 OR rtlalc_1(6));
  aux33 <= (aux0 OR rtlalc_1(7));
  aux34 <= (NOT(aux1) OR rtlalc_1(10));
  aux35 <= (aux0 OR rtlalc_1(17));
  aux36 <= (aux0 OR rtlalc_1(18));
  aux37 <= (NOT(aux1) OR rtlalc_1(19));
  aux38 <= (aux0 AND reg_nreg(5));
  aux41 <= (NOT(c_reset_reg) AND (NOT(reset) AND (c_nreg AND NOT(reg_nreg(5)))));
  aux42 <= (c_nreg AND NOT(reg_nreg(7)));
  aux43 <= (c_nreg AND NOT(reg_nreg(17)));
  aux44 <= (c_nreg AND NOT(reg_nreg(18)));
  aux45 <= (NOT(rtlcarry_0(19)) OR NOT(c_nreg));
END RTL;



-- Configuration for sxlib/VITAL library...
library sxlib;
use sxlib.vcomponents.all;

configuration CFG_neuronreg_boom of neuronreg_boom is
  for RTL
  end for;
end CFG_neuronreg_boom;
